{"snippet-format":"snippet","total":1,"start":1,"page-length":10,"results":[{"index":1,"uri":"/questions/20911599.json","path":"fn:doc(\"/questions/20911599.json\")","score":0,"confidence":0,"fitness":0,"href":"/v1/documents?uri=%2Fquestions%2F20911599.json","mimetype":"application/json","format":"json","content":{"id":"/questions/20911599.json","creationDate":"2014-01-03T19:49:45.943","body":"\n\nI'm working in PyCharm 3.0.2 using WinPython 2.7.5.3 when running my unit test in debug mode all of them are passing. However if I run them normally I have one that fails - specifically the result of the code below returns an extra unexpected item in the result list.\n\nThis is the failed test:\n\n\tdef test4(self):\n\t        bz = BezNet()\n\t\n\t        bz.insert([P(1, 1), P(2, 3)])\n\t        bz.insert([P(1, 10), P(2, 30)])\n\t\n\t        nodes = [n for n in bz.nodes]\n\t        self.assertEqual(len(nodes), 4)\n\t        edges = [e for e in bz.edges]\n\t        self.assertEqual(len(edges), 2)\n\t\n\t        bbzz = bz.separate()\n\t        self.assertEqual(len(bbzz), 2) # assertioin fails (len==3) but ONLY in run mode\n\t\n\nThis is an excerpt of the part of the class `BezNet` being tested.\n\n\t....\n\tdef _visit(self, a, nodes, edges):\n\t    if a in nodes:\n\t        return None\n\t    for b in a._out:\n\t        edges[a, b] = self._edges[a, b]\n\t        self._visit(b, nodes, edges)\n\t    nodes.add(a)\n\t\n\tdef separate(self):\n\t    result = []\n\t    while len(self._nodes):\n\t        nodes = set()\n\t        edges = {}\n\t        for x in self._nodes:\n\t            start = x\n\t            break\n\t\n\t        self._visit(start, nodes, edges)\n\t        part = BezNet()\n\t        part._nodes = nodes\n\t        self._nodes.difference_update(nodes)\n\t        part._edges = edges\n\t        for e in edges:\n\t            del self._edges[e]\n\t        result.append(part)\n\t\n\t    return result\n\t....\n\t\n\nThe rest of the class is rather large so I won't include it here unless someone thinks it could be at fault in which case I will edit. [I'm not looking for a solution to the bug in my code yet, just how to go about tracking it when the tools are playing up]\n\nMy question is what could be happening under the hood to be causing this and what strategies one could use to go about tracing the problem?","lastActivityDate":"2014-01-03T21:12:56.480","title":"Strategy for debugging a python unittest assertion that only fails when not debugging","tags":["python","debugging","pycharm","methodology"],"voteCount":0,"comments":[],"answers":[{"id":"/answers/20912770.json","creationDate":"2014-01-03T21:12:56.480","body":"\n\nIn this particular circumstance the Heisenbug was due to the arbitrary ordering when the `set` type is iterated which happens to be repeatable but different between run and debug modes see [this discussion](http://stackoverflow.com/questions/3848091/python-set-iteration-order-varies-from-run-to-run)... My bad.\n\n*In the end the solution came from copious print statements and waiting for that flash of inspiration of what documentation to double check.*","accepted":true,"comments":[],"itemTally":0,"owner":{"displayName":"norlesh","id":"263399"},"creationYearMonth":"201401"}],"creationYearMonth":"201401","itemTally":0,"owner":{"displayName":"norlesh","id":"263399"}}}],"facets":{"date":{"type":"xs:string","facetValues":[{"name":"201401","count":3,"value":"201401"}]},"tag":{"type":"xs:string","facetValues":[{"name":"algorithm","count":2,"value":"algorithm"},{"name":"c++","count":2,"value":"c++"},{"name":"jmeter","count":2,"value":"jmeter"},{"name":"regex","count":2,"value":"regex"},{"name":"search","count":2,"value":"search"},{"name":"visual-c++","count":2,"value":"visual-c++"},{"name":"debugging","count":1,"value":"debugging"},{"name":"methodology","count":1,"value":"methodology"},{"name":"pycharm","count":1,"value":"pycharm"},{"name":"python","count":1,"value":"python"}]}},"qtext":"sort:active","report":"(for $result in cts:search(fn:collection(), cts:and-query(cts:directory-query(\"/questions/\", \"infinity\"), ()), (\"unfiltered\",\"faceted\"), 1) order by (($result//lastActivityDate)[1]) descending return $result)[1 to 10]","metrics":{"query-resolution-time":"PT0.006811S","facet-resolution-time":"PT0.0023S","snippet-resolution-time":"PT0.000632S","total-time":"PT0.048027S"}}
