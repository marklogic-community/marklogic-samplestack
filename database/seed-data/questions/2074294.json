{
  "id": "/questions/2074294",
  "creationDate": "2014-01-18T11:42:03.363",
  "body": "\n\nAm i allowed to use a DC outside of a paint cycle?\nIs my window's DC guaranteed to be valid forever?\n\ni'm trying to figure out how long my control's Device Context (DC) is valid.\n\ni know that i can call:\n\n\tGetDC(hWnd);\n\t\n\nto get the device context of my control's window, but is that allowed?\n\nWhen Windows sends me a WM_PAINT message, i am supposed to call [BeginPaint](http://msdn.microsoft.com/en-us/library/dd183362.aspx)/[EndPaint](http://msdn.microsoft.com/en-us/library/dd162598%28VS.85%29.aspx) to properly acknowledge that i've painted it, and to internally clear the invalid region:\n\n\tBeginPaint(hWnd, {out}paintStruct);\n\ttry\n\t   //Do my painting\n\tfinally\n\t   EndPaint(hWnd, paintStruct);\n\tend;\n\t\n\nBut calling BeginPaint also returns me a DC inside the PAINTSTRUCT structure. This is the DC that i **should** be painting on.\n\ni cannot find anything in the documentation that says that the DC returned by BeginPaint() is the same DC that i would get from GetDC().\n\nEspecially now, in the days of Desktop Composition, is it valid to paint on a DC that i obtain outside of BeginPaint?\n\nThere seem to be 2 ways i can get a DC to paint on during a paint cycle:\n\n1. dc = [GetDC](http://msdn.microsoft.com/en-us/library/dd144871%28VS.85%29.aspx)(hWnd);\n\n2. BeginPaint(&paintStruct);\n\nThere is a 3rd way, but it seems to be a bug with the Borland Delphi that i develop with. \n\nDuring [WM_PAINT](http://msdn.microsoft.com/en-us/library/dd145213%28VS.85%29.aspx) processing, Delphi believes that the wParam is a DC, and proceeds to paint on it. Whereas the MSDN says that the wParam of a WM_PAINT message is unused.\n\n##The Why\n\nMy real goal [is to try to keep a persistent GDI+ Graphics object](http://stackoverflow.com/questions/1615984/delphi-gdi-when-is-a-device-context-created-destroyed) against an HDC, so that i can use some better performing features of GDI+ that depend on having a persistent DC.\n\nDuring the WM_PAINT message handling i want to draw a GDI+ image to the canvas. The following nieve version is very slow:\n\n\tWM_PAINT:\n\t{\n\t   PAINTSTRUCT ps;\n\t   BeginPaint(m_hwnd, ps);\n\t   Graphics g = new Graphics(ps.hdc);\n\t   g.DrawImage(m_someBitmap, 0, 0);\n\t   g.Destroy();\n\t   EndPaint(h_hwnd, ps);\n\t}\n\t\n\nGDI contains a faster performing bitmap, a CachedBitmap. But using it without thinking gives no performance benefit:\n\n\tWM_PAINT:\n\t{\n\t   PAINTSTRUCT ps;\n\t   BeginPaint(m_hwnd, ps);\n\t\n\t   Graphics g = new Graphics(ps.hdc);\n\t   CachedBitmap bm = new CachedBitmap(m_someBitmap, g);\n\t   g.DrawCachedBitmap(m_bm, 0, 0);\n\t   bm.Destroy();\n\t   g.Destroy();\n\t   EndPaint(h_hwnd, ps);\n\t}\n\t\n\nThe performance gain comes from creating the CachedBitmap once, so on program initialization:\n\n\tm_graphics = new Graphics(GetDC(m_hwnd));\n\tm_cachedBitmap = new CachedBitmap(b_someBitmap, m_graphcis);\n\t\n\nAnd now on the paint cycle:\n\n\tWM_PAINT:\n\t{\n\t   PAINTSTRUCT ps;\n\t   BeginPaint(m_hwnd, ps);\n\t   m_graphics.DrawCachedBitmap(m_cachedBitmap, 0, 0);\n\t   EndPaint(h_hwnd, ps);\n\t}        \n\t\n\nExcept now i'm trusting that the DC i obtained after program initializtion will be the same DC for my window as long as the application is running. This means that it survives through:\n* fast user switches\n* composition enabled/disabled\n* theme switching\n* theme disabling\n\ni find nothing in MSDN that guarantees that the same DC will be used for a particular window for as long as the window exists.\n\n**Note:** i am not using double-buffering, [because i want to be a good developer, and do the right thing](http://blogs.msdn.com/oldnewthing/archive/2006/01/03/508694.aspx). Sometimes that means you double-buffering is bad.",
  "lastActivityDate": "2014-04-17T23:06:19.783",
  "title": "Win32: Does a window have the same HDC for its entire lifetime?",
  "tags": [
    "windows",
    "gdi+",
    "gdi",
    "paint",
    "device-context"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201404",
  "itemTally": 0,
  "owner": null
}