{
  "id": "/questions/2074149",
  "creationDate": "2014-01-18T11:19:58.950",
  "body": "\n\nso I'm not well versed in overriding hashCode and I seem to have some infinite recursion somehow going on with the hashCode method.\n\nHere is my scenario, I have a class DuplicateCache that is a cache object that checks for duplicate objects in our system. I have a static inner class Duplicate which represents the Duplicate objects. \n\nThe DuplicateCache maintains a HashMap to keep track of all its entries. Each entry consists of a Duplicate object as the key and a Long object as the value.\n\nI am performing all my operations using the Duplicate object keys, and when I run the put method into the HashMap, there becomes infinite recursion in the hashCode() method of the Duplicate object.\n\nThe hashCode() method in duplicate calls a hashCode of another class I had to override, so I'll include that after\n\nWithout further ado, here is my code for the offending Duplicate class:\n\n\tpublic static class Duplicate{\n\t    private String merchId;\n\t    private String custId;\n\t    private MagicPrice price;\n\t    private int status;\n\t    private boolean compareStatus;\n\t\n\t// snip methods        \n\t\n\t    @Override public boolean equals(Object o){\n\t        cat.debug(\"In the override equals method of Duplicate\"); //DELETEME\n\t\n\t        if(o instanceof Duplicate)\n\t            return equals((Duplicate) o);\n\t        else\n\t            return false;\n\t    }\n\t\n\t    @Override public int hashCode() {\n\t        return merchId.hashCode() + custId.hashCode() + price.hashCode();\n\t    }\n\t\n\t\n\t    /*Equals method vital to the HashMap cache operations\n\t\n\t    How the compareStatus and status fields change this:\n\t    if both objects have true for compareStatus -> Equals will compare the statuses\n\t    otherwise                                   -> Equals will not compare the statuses\n\t\n\t    If we only want to do an in_progress check, we need to compare status.\n\t    On the other hand success checks need to ignore the status.\n\t    */\n\t    public boolean equals(Duplicate d){        \n\t        try{\n\t            if(merchId.equals(d.merchId) && custId.equals(d.custId) && (price.compareTo(d.price)==0)){\n\t                if(this.compareStatus && d.compareStatus && this.status != d.status)\n\t                    return false;\n\t\n\t                return true;\n\t            }\n\t        }catch(PriceException pe){\n\t            //Catching from MagicPrice.compareTo object method, return false\n\t            return false;\n\t        }\n\t\n\t        return false;\n\t    }        \n\t}\n\t\n\nThat does it for the Duplicate object, now the MagicPrice hashCode() method:\n\n\t@Override public boolean equals(Object o){\n\t    if(!(o instanceof MagicPrice))\n\t        return false;\n\t\n\t    MagicPrice p = (MagicPrice)o;\n\t\n\t    if(this.iso4217code.equals(p.iso4217code) && this.value.equals(p.value))\n\t        return true;\n\t\n\t    else return false;\n\t}\n\t\n\t@Override public int hashCode(){\n\t    return value.hashCode() + this.iso4217code.hashCode();\n\t}\n\t\n\nIn this class the value field is a BigDecimal and the iso4217code is a String. For what its worth the stackTrace finally dies in the BigDecimal hashCode() method, but I wouldn't believe the BigDecimal hashCode() method would be broken.\n\nCould someone please explain to me what I am missing about this hashCode() overriding? I know there must be something I'm doing wrong to generate this behaviour.\n\nHere is the stack trace from my log file:\n\n\tjava.lang.StackOverflowError\n\t    at java.math.BigDecimal.hashCode(BigDecimal.java:2674)\n\t    at com.moremagic.util.MagicPrice.hashCode(Unknown Source)\n\t    at com.moremagic.core.DuplicateCache2$Duplicate.hashCode(Unknown Source)\n\t    at java.util.HashMap.get(HashMap.java:300)\n\t    at com.moremagic.util.ExpirableHashMap.get(Unknown Source)\n\t    at com.moremagic.core.DuplicateCache2.put(Unknown Source)\n\t    at com.moremagic.core.DuplicateCache2.put(Unknown Source)\n\t    at com.moremagic.core.DuplicateCache2.put(Unknown Source)\n\t    at com.moremagic.core.DuplicateCache2.put(Unknown Source)\n\t    <... and it continues with the put references for a looong time ...>\n\t\n\nAlso that trace references a proprietary get method so heres that for you:   \n\n\tpublic Object get(Object key) {\n\texpire();\n\treturn hashtable.get(key);\n\t}\n\t\n\nexpire() is a method that does time based removal of old entries in the table\nhashtable is the HashMap object\n\nThanks!",
  "lastActivityDate": "2014-01-18T18:13:32.997",
  "title": "Java overriding hashCode() gets StackOverflowError",
  "tags": [
    "java",
    "override",
    "hashcode",
    "stackoverflowerror"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201401",
  "itemTally": 0,
  "owner": null
}