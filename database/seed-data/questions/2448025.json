{
  "id": "/questions/2448025",
  "creationDate": "2014-03-17T22:57:52.740",
  "body": "\n\nI have a need for a counter of type `long` with the following requirements/facts:\n* Incrementing the counter should take as little time as possible.\n* The counter will only be written to by one thread.\n* Reading from the counter will be done in another thread.\n* The counter will be incremented regularly (as much as a few thousand times per second), but will only be read once every five seconds.\n* Precise accuracy isn't essential, only a rough idea of the size of the counter is good enough.\n* The counter is never cleared, decremented.\n\nBased upon these requirements, how would you choose to implement your counter? As a simple `long`, as a `volatile long` or using an `AtomicLong`? Why?\n\nAt the moment I have a `volatile long` but was wondering whether another approach would be better. I am also incrementing my long by doing `++counter` as opposed to `counter++`. Is this really any more efficient (as I have been led to believe elsewhere) because there is no assignment being done?\n\nThanks in advance\n\nRich",
  "lastActivityDate": "2014-04-28T18:50:01.660",
  "title": "Long primitive or AtomicLong for a counter?",
  "tags": [
    "java",
    "performance",
    "java.util.concurrent"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201404",
  "itemTally": 0,
  "owner": null
}