{
  "id": "/questions/2841124",
  "creationDate": "2014-05-18T01:50:40.000",
  "body": "\n\nI have a WPF canvas on which I'm dynamically creating objects from code. These objects are being transformed by setting the RenderTransform property, and an animation needs to be applied one of those transforms. Currently, I can't get properties of any transform to animate (although no exception gets raised and the animation appears to run - the completed event gets raised). \n\nIn addition, if the animation system is stressed, sometimes the Storyboard.Completed event is never raised. \n\nAll the examples I've come accross animate the transforms from XAML. [MSDN documentation](http://msdn.microsoft.com/en-us/library/ms752312.aspx#applyanimationstoproperty) suggests that the x:Name property of a transform must be set for it to be animatable, but I haven't found a working way to set it from code.\n\nAny ideas?\n\nHere's the full code listing that reproduces the problem:\n\n\tusing System;\n\tusing System.Diagnostics;\n\tusing System.Windows;\n\tusing System.Windows.Controls;\n\tusing System.Windows.Input;\n\tusing System.Windows.Media;\n\tusing System.Windows.Media.Animation;\n\tusing System.Windows.Shapes;\n\t\n\tnamespace AnimationCompletedTest {\n\t    /// <summary>\n\t    /// Interaction logic for MainWindow.xaml\n\t    /// </summary>\n\t    public partial class MainWindow : Window {\n\t\n\t        Canvas panel;\n\t        public MainWindow() {\n\t            InitializeComponent();\n\t            MouseDown += DoDynamicAnimation;\n\t\n\t            Content = panel = new Canvas();\n\t        }\n\t\n\t        void DoDynamicAnimation(object sender, MouseButtonEventArgs args) {\n\t\n\t            for (int i = 0; i < 12; ++i) {\n\t                var e = new Ellipse {\n\t                    Width = 16,\n\t                    Height = 16,\n\t                    Fill = SystemColors.HighlightBrush\n\t                };\n\t                Canvas.SetLeft(e, Mouse.GetPosition(this).X);\n\t                Canvas.SetTop(e, Mouse.GetPosition(this).Y);\n\t\n\t                var tg = new TransformGroup();\n\t                var translation = new TranslateTransform(30, 0);\n\t                tg.Children.Add(translation);\n\t                tg.Children.Add(new RotateTransform(i * 30));\n\t                e.RenderTransform = tg;\n\t\n\t                panel.Children.Add(e);\n\t\n\t                var s = new Storyboard();\n\t                Storyboard.SetTarget(s, translation);\n\t                Storyboard.SetTargetProperty(s, new PropertyPath(TranslateTransform.XProperty));\n\t\n\t                s.Children.Add(\n\t                    new DoubleAnimation(3, 100, new Duration(new TimeSpan(0, 0, 0, 1, 0))) {\n\t                        EasingFunction = new PowerEase {EasingMode = EasingMode.EaseOut}\n\t                    });\n\t\n\t                s.Completed += \n\t                    (sndr, evtArgs) => {\n\t                        Debug.WriteLine(\"Animation {0} completed {1}\", s.GetHashCode(), Stopwatch.GetTimestamp());\n\t                        panel.Children.Remove(e);\n\t                    };\n\t\n\t                Debug.WriteLine(\"Animation {0} started {1}\", s.GetHashCode(), Stopwatch.GetTimestamp());\n\t\n\t                s.Begin();\n\t            }\n\t        }\n\t\n\t        [STAThread]\n\t        public static void Main() {\n\t            var app = new Application();\n\t            app.Run(new MainWindow());\n\t        }\n\t    }\n\t}\n\t",
  "lastActivityDate": "2014-03-18T01:38:54.823",
  "title": "WPF: Animating TranslateTransform from code",
  "tags": [
    "c#",
    "wpf",
    "animation"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201403",
  "itemTally": 0,
  "owner": null
}