{
  "id": "/questions/2072648",
  "creationDate": "2014-01-18T07:25:32.543",
  "body": "\n\nI'm trying to get transactions working within a Grails service, but I'm not getting the results I'm expecting. Can someone tell me if I'm doing something wrong, if my assumptions are off?\n\n**My domain class:**\n\n\t    class Account {\n\t\n\t  static constraints = {\n\t    balance(min: 0.00)\n\t  }\n\t\n\t  String companyName\n\t  BigDecimal balance = 0.00\n\t  Boolean active = true\n\t\n\t  String toString() {\n\t    return \"${companyName} : ${balance}\"\n\t  }\n\t}\n\t\n\n**My service:**\n\n\tclass AccountService {\n\t\n\t  boolean transactional = true\n\t\n\t  def transfer(Account source, Account destination, amount) throws RuntimeException {\n\t\n\t    if (source.active && destination.active) {\n\t      source.balance -= amount\n\t\n\t      if (!source.save(flush: true)) {\n\t        throw new RuntimeException(\"Could not save source account.\")\n\t      } else {\n\t        destination.balance += amount\n\t\n\t        if (!destination.save(flush: true)) {\n\t          throw new RuntimeException(\"Could not save destination account.\")\n\t        }\n\t      }\n\t    } else {\n\t      throw new RuntimeException(\"Both accounts must be active.\")\n\t    }\n\t  }\n\t\n\t  def someMethod(Account account) throws RuntimeException {\n\t\n\t    account.balance = -10.00\n\t\n\t    println \"validated: ${account.validate()}\"\n\t\n\t    if(!account.validate()) {\n\t      throw new RuntimeException(\"Rollback!\")\n\t    }\n\t  }\n\t}\n\t\n\n**My unit test:**\n    import grails.test.*\n\n\tclass AccountServiceTests extends GrailsUnitTestCase {\n\t\n\t  def AccountService\n\t\n\t  protected void setUp() {\n\t    super.setUp()\n\t    mockDomain(Account)\n\t    AccountService = new AccountService()\n\t  }\n\t\n\t  protected void tearDown() {\n\t    super.tearDown()\n\t  }\n\t\n\t  void testTransactional() {\n\t    def account = new Account(companyName: \"ACME Toy Company\", balance: 2000.00, active: true)\n\t\n\t    def exception = null\n\t\n\t    try {\n\t      AccountService.someMethod(account)\n\t    } catch (RuntimeException e) {\n\t      exception = e\n\t    }\n\t\n\t    assert exception instanceof RuntimeException\n\t\n\t    println \"exception thrown: ${exception.getMessage()}\"\n\t\n\t    assertEquals 2000.00, account.balance\n\t  }\n\t}\n\t\n\n**The result:**\n\n\tTestsuite: AccountServiceTests\n\tTests run: 1, Failures: 1, Errors: 0, Time elapsed: 1.068 sec\n\t------------- Standard Output ---------------\n\t--Output from testTransactional--\n\tvalidated: false\n\texception thrown: Rollback!\n\t------------- ---------------- ---------------\n\t------------- Standard Error -----------------\n\t--Output from testTransactional--\n\t------------- ---------------- ---------------\n\t\n\tTestcase: testTransactional took 1.066 sec\n\t    FAILED\n\texpected:<2000.00> but was:<-10.00>\n\tjunit.framework.AssertionFailedError: expected:<2000.00> but was:<-10.00>\n\t    at AccountServiceTests.testTransactional(AccountServiceTests.groovy:89)\n\t    at _GrailsTest_groovy$_run_closure4.doCall(_GrailsTest_groovy:203)\n\t    at _GrailsTest_groovy$_run_closure4.call(_GrailsTest_groovy)\n\t    at _GrailsTest_groovy$_run_closure2.doCall(_GrailsTest_groovy:147)\n\t    at _GrailsTest_groovy$_run_closure1_closure19.doCall(_GrailsTest_groovy:113)\n\t    at _GrailsTest_groovy$_run_closure1.doCall(_GrailsTest_groovy:96)\n\t    at TestApp$_run_closure1.doCall(TestApp.groovy:66)\n\t    at gant.Gant$_dispatch_closure4.doCall(Gant.groovy:324)\n\t    at gant.Gant$_dispatch_closure6.doCall(Gant.groovy:334)\n\t    at gant.Gant$_dispatch_closure6.doCall(Gant.groovy)\n\t    at gant.Gant.withBuildListeners(Gant.groovy:344)\n\t    at gant.Gant.this$2$withBuildListeners(Gant.groovy)\n\t    at gant.Gant$this$2$withBuildListeners.callCurrent(Unknown Source)\n\t    at gant.Gant.dispatch(Gant.groovy:334)\n\t    at gant.Gant.this$2$dispatch(Gant.groovy)\n\t    at gant.Gant.invokeMethod(Gant.groovy)\n\t    at gant.Gant.processTargets(Gant.groovy:495)\n\t    at gant.Gant.processTargets(Gant.groovy:480)\n\t\n\n**My expectation:**\n\nWhen the account is given a negative balance, it shouldn't validate (which it doesn't), a RuntimeException should be thrown (which it is), and the account should rollback to it's previous state (balance: 2000), which is where it falls apart.\n\nWhat am I missing here?",
  "lastActivityDate": "2014-01-18T20:23:19.767",
  "title": "Grails Service Transactions",
  "tags": [
    "grails",
    "transactions",
    "service"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201401",
  "itemTally": 0,
  "owner": null
}