{
  "id": "/questions/3042011",
  "creationDate": "2014-06-17T09:25:37.783",
  "body": "\n\nLet's say I have a function\n\n\tdef odd_or_even n\n\t  if n%2 == 0\n\t    return :even\n\t  else\n\t    return :odd\n\t  end\n\tend\n\t\n\nAnd I had a simple enumerable array\n\n\tsimple = [1,2,3,4,5]\n\t\n\nAnd I ran it through map, with my function, using a do-end block:\n\n\tsimple.map do\n\t  |n| odd_or_even(n)\n\tend\n\t# => [:odd,:even,:odd,:even,:odd]\n\t\n\nHow could I do this without, say, defining the function in the first place?  For example,\n\n\t# does not work\n\tsimple.map do |n|\n\t  if n%2 == 0\n\t    return :even\n\t  else\n\t    return :odd\n\t  end\n\tend\n\t\n\t# Desired result:\n\t# => [:odd,:even,:odd,:even,:odd]\n\t\n\nis not valid ruby, and the compiler gets mad at me for even thinking about it.  But how would I implement an equivalent sort of thing, that works?\n\n*edit*\n\nIn reality, the solution to my problem matters to me a lot less than the motivation/reasoning behind it, to help me understand more how ruby blocks work :)",
  "lastActivityDate": "2014-05-08T05:00:27.767",
  "title": "Understanding Ruby Enumerable#map (with more complex blocks)",
  "tags": [
    "ruby",
    "language-features",
    "block",
    "enumerable"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201405",
  "itemTally": 0,
  "owner": null
}