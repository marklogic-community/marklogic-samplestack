{
  "id": "/questions/2071258",
  "creationDate": "2014-01-18T04:03:00.140",
  "body": "\n\nI'm currently learning Python and coming from a strong C# background.  I keep hearing about doing things in a Pythonic way to take advantage of the dynamic nature of the language and some of it I get and some I don't.\n\nI'm creating a site with Django and my approach to views is to use classes.  My current thinking is to have a base class that has some stuff about the template and the model to use.  This will have a default funky 404 type page with site search and stuff on then base all the other pages off this. So each area of the site will have its own EG News and all the model related functions and filtering will be in that class with a further class on top of that for HTML or AJAX requests.  So you would have something like this:\n\n\\site\\common\\ViewBase\n\n--\\news\\NewsBase(ViewBase)\n\n--\\news\\HtmlView(NewsBase)\n\n--\\news\\AJAXView(NewsBase)\n\nURLs would be mapped like [http://tld/news/latest](http://tld/news/latest) maps to site.news.htmlview and [http://tld/news/](http://tld/news/)/to/ will be also be mapped site.news.htmlview but the class will figure out what to do with the extra params.\n\nThis is pretty much what I would do in C# but the Django tutorial only shows using methods for views, making me wonder if this is not a very pythonic solution?\n\nThoughts?\n\nEdit:  After S.Lott comment about thread safety, Is it better to leave the functions as they are and have them create an instance of a class and call a method on it?\n\nWhat I am looking for is a place to put common code for each section of the site for filtering the model, authentication for the site, etc",
  "lastActivityDate": "2014-01-19T00:20:22.550",
  "title": "Using classes for Django views, is it Pythonic?",
  "tags": [
    "python",
    "django",
    "design"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201401",
  "itemTally": 0,
  "owner": null
}