{
  "id": "/questions/2068680",
  "creationDate": "2014-01-17T16:44:41.667",
  "body": "\n\nI've got a small Java program that I'm developing for a project, which pulls a user's inbox from a specified URI using JavaMail, and then begins processing the messages.\n\nIn Outlook, there's a function in the properties menu to set an expiry date for the message, which adds (for example):\n\nExpiry-Date: Thu, 14 Jan 2010 17:00:00 -0000\n\nTo the message header.\n\nRetrieving that from the email header is simple using the getHeader(String header) method from  javax.mail.Message, and it returns a String[], in which happens to be the part after the colon, tokenised by spaces.\n\nWhat I want to do is make this String[] into a single String, to later make into a Date. So setting up a simple foreach loop as follows:\n\n\tString date = \"\";\n\tfor(String part : header){\n\t  date.concat(part);\n\t}\n\tSystem.out.println(date);\n\t\n\nNow for some reason, this code returns an empty string, not entirely sure why, as this should be valid Java.\n\nHowever, the following code does work, and I don't know why, as it seems illogical to me\n\n\tString date = \"\";\n\tfor(String part : header){\n\t   date = date + part;\n\t}\n\tSystem.out.println(date);\n\t\n\nWhich prints out the correct date. Can someone tell me if this is the correct way of doing this, and if not, what's going wrong with the concat(String append) method?\n\nTIA,\n\nJimiF",
  "lastActivityDate": "2014-01-17T16:58:11.607",
  "title": "date = date + part vs. date.concat(part)",
  "tags": [
    "java",
    "concatenation",
    "javamail"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201401",
  "itemTally": 0,
  "owner": null
}