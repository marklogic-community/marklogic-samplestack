{
  "id": "/questions/2070973",
  "creationDate": "2014-01-18T03:03:33.697",
  "body": "\n\nOk, I'm currently writing a scheduling web app for a large company, and it needs to be *fast*. Normal fast (<1s) doesn't cut it with these guys, so we're aiming for <0.5s, which is hard to achieve when using postbacks.\n\nMy question is: does anyone have a suggestion of how best to buffer calendar/schedule data to speed load times?\n\nMy plan is to load the selected week's data, and *another week on either side*, and use these to buffer the output: i.e. it will never have load the week you've asked for, it'll always have that in memory, and it'll buffer the weeks on either side for when you next change.\n\nHowever, I'm not sure exactly how to achieve this, the asynch loading is simple when using ajax pagemethods, but it's a question of where to store the data (temporarily) after it loads: I am currently using a static class with a dictionary> to do it, but this is probably not the best way when it comes to scaling to the large userbase.\n\nAny suggestions?\n\n<b>EDIT</b>\n\nThe amount of data loaded is not particularly high (there are a few fields on each appointment, which are converted to a small container class and have some processing done on them to organise the dates and calculate the concurrent appointments, and it's unlikely there'll be more than ~30 appointments a week due to the domain) however the database is under very high load from other areas of the application (this is a *very* large scale system with thousands of users transfering a large volume of information around).",
  "lastActivityDate": "2014-01-18T03:17:42.827",
  "title": "Asynchronous output buffer for calendar (c#)",
  "tags": [
    "c#",
    "ajax",
    "asynchronous"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201401",
  "itemTally": 0,
  "owner": null
}