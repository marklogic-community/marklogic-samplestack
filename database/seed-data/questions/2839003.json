{
  "id": "/questions/2839003",
  "creationDate": "2014-05-17T13:14:19.187",
  "body": "\n\nI'm trying to get familiar with Collections.  I have a String which is my key, email address, and a Person object (firstName, lastName, telephone, email).  I read in the Java collections chapter on Sun's webpages that if you had a HashMap and wanted it sorted, you could use a TreeMap.  How does this sort work?  Is it based on the compareTo() method you have in your Person class?  I overrode the compareTo() method in my Person class to sort by lastName.  But it isn't working properly and was wondering if I have the right idea or not.  getSortedListByLastName at the bottom of this code is where I try to convert to a TreeMap.  Also, if this is the correct way to do it, or one of the correct ways to do it, how do I then sort by firstName since my compareTo() is comparing by lastName.\n\n\timport java.util.*;\n\t\n\tpublic class OrganizeThis \n\t{\n\t    /** \n\t    Add a person to the organizer\n\t\n\t    @param p A person object\n\t    */\n\t    public void add(Person p)\n\t    {   \n\t        staff.put(p.getEmail(), p);\n\t        //System.out.println(\"Person \" + p + \"added\");\n\t    }\n\t\n\t    /**\n\t    * Remove a Person from the organizer.\n\t    *\n\t    * @param email The email of the person to be removed.\n\t    */\n\t    public void remove(String email)\n\t    {\n\t        staff.remove(email);\n\t    }\n\t\n\t    /**\n\t    * Remove all contacts from the organizer.\n\t    *\n\t    */\n\t    public void empty()\n\t    {\n\t        staff.clear();\n\t    }\n\t\n\t    /**\n\t    * Find the person stored in the organizer with the email address.\n\t    * Note, each person will have a unique email address.\n\t    * \n\t    * @param email The person email address you are looking for.\n\t    *\n\t    */\n\t    public Person findByEmail(String email)\n\t    {\n\t        Person aPerson = staff.get(email);\n\t        return aPerson;\n\t    }\n\t\n\t    /**\n\t    * Find all persons stored in the organizer with the same last name.\n\t    * Note, there can be multiple persons with the same last name.\n\t    * \n\t    * @param lastName The last name of the persons your are looking for.\n\t    *\n\t    */\n\t    public Person[] find(String lastName)\n\t    {\n\t        ArrayList<Person> names = new ArrayList<Person>();\n\t\n\t        for (Person s : staff.values())\n\t        {\n\t            if (s.getLastName() == lastName) {\n\t                names.add(s);\n\t            }\n\t        }\n\t        // Convert ArrayList back to Array\n\t        Person nameArray[] = new Person[names.size()];\n\t        names.toArray(nameArray);\n\t        return nameArray;\n\t    }\n\t\n\t    /**\n\t    * Return all the contact from the orgnizer in\n\t    * an array sorted by last name.\n\t    * \n\t    * @return An array of Person objects.\n\t    *\n\t    */\n\t    public Person[] getSortedListByLastName()\n\t    {\n\t        Map<String, Person> sorted = new TreeMap<String, Person>(staff);\n\t        ArrayList<Person> sortedArrayList = new ArrayList<Person>();\n\t        for (Person s: sorted.values()) {\n\t            sortedArrayList.add(s);\n\t        }\n\t        Person sortedArray[] = new Person[sortedArrayList.size()];\n\t        sortedArrayList.toArray(sortedArray);\n\t        return sortedArray;\n\t    }\n\t\n\t    private Map<String, Person> staff = new HashMap<String, Person>();\n\t\n\tpublic static void main(String[] args)\n\t    {\n\t        OrganizeThis testObj = new OrganizeThis();\n\t        Person person1 = new Person(\"J\", \"W\", \"111-222-3333\", \"JW@ucsd.edu\");\n\t        Person person2 = new Person(\"K\", \"W\", \"345-678-9999\", \"KW@ucsd.edu\");\n\t        Person person3 = new Person(\"Phoebe\", \"Wang\", \"322-111-3333\", \"phoebe@ucsd.edu\");\n\t        Person person4 = new Person(\"Nermal\", \"Johnson\", \"322-342-5555\", \"nermal@ucsd.edu\");\n\t        Person person5 = new Person(\"Apple\", \"Banana\", \"123-456-1111\", \"apple@ucsd.edu\");\n\t        testObj.add(person1);\n\t        testObj.add(person2);\n\t        testObj.add(person3);\n\t        testObj.add(person4);\n\t        testObj.add(person5);\n\t\n\t        System.out.println(testObj.findByEmail(\"JW@ucsd.edu\"));\n\t        System.out.println(\"------------\" + '\\n');\n\t\n\t        Person a[] = testObj.find(\"W\");\n\t\n\t        for (Person p : a)\n\t        System.out.println(p);\n\t\n\t        System.out.println(\"------------\" + '\\n');\n\t        a = testObj.find(\"W\");\n\t\n\t        for (Person p : a)\n\t        System.out.println(p);\n\t\n\t        System.out.println(\"SORTED\" + '\\n');\n\t        a = testObj.getSortedListByLastName();\n\t        for (Person b : a) {\n\t            System.out.println(b);\n\t        }\n\t    }\n\t    }\n\t\n\nPerson class:\n\n\tpublic class Person implements Comparable\n\t{\n\t    String firstName;\n\t    String lastName;\n\t    String telephone;\n\t    String email;\n\t\n\t    public Person()\n\t    {\n\t       firstName = \"\";\n\t       lastName = \"\";\n\t       telephone = \"\";\n\t       email = \"\";\n\t    }\n\t\n\t    public Person(String firstName)\n\t    {\n\t        this.firstName = firstName;\n\t    }\n\t\n\t    public Person(String firstName, String lastName, String telephone, String email) \n\t    {\n\t        this.firstName = firstName;\n\t        this.lastName = lastName;\n\t        this.telephone = telephone;\n\t        this.email = email;\n\t    }\n\t\n\t    public String getFirstName()\n\t    {\n\t        return firstName;\n\t    }\n\t\n\t    public void setFirstName(String firstName)\n\t    {\n\t        this.firstName = firstName;\n\t    }\n\t\n\t    public String getLastName()\n\t    {\n\t        return lastName;\n\t    }\n\t\n\t    public void setLastName(String lastName)\n\t    {\n\t        this.lastName = lastName;\n\t    }\n\t\n\t    public String getTelephone()\n\t    {\n\t        return telephone;\n\t    }\n\t\n\t    public void setTelephone(String telephone)\n\t    {\n\t        this.telephone = telephone;\n\t    }\n\t\n\t    public String getEmail()\n\t    {\n\t        return email;\n\t    }\n\t\n\t    public void setEmail(String email)\n\t    {\n\t        this.email = email;\n\t    }\n\t\n\t    public int compareTo(Object o)\n\t    {\n\t        String s1 = this.lastName + this.firstName;\n\t        String s2 = ((Person) o).lastName + ((Person) o).firstName;\n\t        return s1.compareTo(s2);\n\t    }\n\t\n\t    public boolean equals(Object otherObject)\n\t    {\n\t        // a quick test to see if the objects are identical\n\t        if (this == otherObject) {\n\t            return true;\n\t        }\n\t\n\t        // must return false if the explicit parameter is null\n\t        if (otherObject == null) {\n\t            return false;\n\t        }\n\t\n\t        if (!(otherObject instanceof Person)) {\n\t            return false;\n\t        }\n\t\n\t        Person other = (Person) otherObject;\n\t        return firstName.equals(other.firstName) && lastName.equals(other.lastName) &&\n\t            telephone.equals(other.telephone) && email.equals(other.email);\n\t    }\n\t\n\t    public int hashCode() \n\t    {\n\t        return this.email.toLowerCase().hashCode();\n\t    }\n\t\n\t    public String toString()\n\t    {\n\t        return getClass().getName() + \"[firstName = \" + firstName + '\\n'\n\t                                    + \"lastName = \" + lastName + '\\n'\n\t                                    + \"telephone = \" + telephone + '\\n'\n\t                                    + \"email = \" + email + \"]\";\n\t    }\n\t\n\t\n\t}\n\t",
  "lastActivityDate": "2014-11-13T17:14:32.843",
  "title": "Sorting in Hash Maps",
  "tags": [
    "java",
    "sorting",
    "collections"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201411",
  "itemTally": 0,
  "owner": null
}