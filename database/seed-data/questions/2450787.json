{
  "id": "/questions/2450787",
  "creationDate": "2014-03-18T06:01:03.427",
  "body": "\n\nI've got some financial data to store and manipulate. Let's say I have 2 divisions, with offices in 2 cities, in 2 currencies, and 4 bank accounts. (It's actually more complex than that.) I want to show a list like this:\n\n\tElectronics\n\t    Chicago\n\t        Dollars\n\t            Account 2 -> transactions in acct2 in $ in chicago/electronics\n\t        Euros\n\t            Account 1 -> transactions in acct1 in E in chicago/electronics\n\t            Account 3 -> etc.\n\t            Account 4\n\t    Brussles\n\t        Dollars\n\t            Account 1\n\t        Euros\n\t            Account 3\n\t            Account 4\n\tDessert Toppings\n\t    Chicago\n\t        Dollars\n\t            Account 1\n\t            Account 4\n\t        Euros\n\t            Account 2\n\t            Account 4\n\t    Brussles\n\t        Dollars\n\t            Account 2\n\t        Euros\n\t            Account 3\n\t            Account 4\n\t\n\nSo at each level except the top, the category can appear in multiple places. I've been [reading](http://stackoverflow.com/questions/935098/database-structure-for-tree-data-structure)[around](http://articles.sitepoint.com/article/hierarchical-data-database/) about the various methods, but none of the examples seem to address my particular use case, where nodes can appear in more than one place in the hierarchy. (Maybe there's a different name for this than \"tree\" or \"hierarchy\".)\n\nI guess my hierarchy is actually something like Division > City > Currency with 'Electronics' and 'Euros' merely instances of each level, but I'm not quite sure how that helps or hurts.\n\n**A few notes**: this is for a demo site, so the dataset won't be large -- ease of set-up and maintenance is more important than query efficiency. (I'm actually considering just building a data object by hand, though I'd much rather do it the *right way*.) Also, FWIW, we're working in php with an ms access back-end, so any libraries out there that make this easy in that environment would be helpful. (I've found a couple of implementations of the nested set pattern already.)",
  "lastActivityDate": "2014-03-19T22:57:12.057",
  "title": "help with tree-like structure",
  "tags": [
    "sql",
    "database-design",
    "data-structures",
    "tree"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201403",
  "itemTally": 0,
  "owner": null
}