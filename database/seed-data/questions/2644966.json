{
  "id": "/questions/2644966",
  "creationDate": "2014-04-17T19:58:58.373",
  "body": "\n\nDo you know a js library that implements a generic Iterator class for collections (be it Arrays or some abstract Enumerable) with a full set of features, like the [Google Common](http://google-collections.googlecode.com/svn/trunk/javadoc/com/google/common/collect/Iterators.html)  or the [Apache Commons](http://commons.apache.org/collections/api-release/org/apache/commons/collections/iterators/package-summary.html)?\n\nEdit: `Enumerable#each` is not an Iterator class. I'm looking for an Iterator, something that would let us write something like:\n\n\tvar iterator = new Iterator(myCollection);\n\tfor(var element = iterator.next(); iterator.hasNext(); element = iterator.next()) {\n\t    // iterator \n\t}\n\t\n\nEdit : mamoo reminded us of the Iterator implementation in [Mozilla's Javascript 1.7](https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Iterators_and_Generators). So the goal now is to find an implementation of this Iterator function in Javascript 1.5 (ECMA 4).\n\nEdit2 : Why using an iterator when librairies (and ECMA 5) provide a `each` method? First, because `each` usually messes with `this` because the callback is `call` -ed (that's why `each` accepts a second argument in Prototype). Then, because people are much more familiar with the `for(;;)` construct than with the `.each(callback)` construct (at least, in my field). Lastly, because an iterator can iterate over plain objects (see javascript 1.7).\n\nEdit3 : I accepted npup's anwser, but here is my shot at it :\n\n\tfunction Iterator(o, keysOnly) {\n\t    if(!(this instanceof arguments.callee))\n\t      return new arguments.callee(o, keysOnly);\n\t    var index = 0, keys = [];\n\t    if(!o || typeof o != \"object\") return;\n\t    if('splice' in o && 'join' in o) {\n\t        while(keys.length < o.length) keys.push(keys.length);\n\t    } else {\n\t        for(p in o) if(o.hasOwnProperty(p)) keys.push(p);\n\t    }\n\t    this.next = function next() {\n\t        if(index < keys.length) {\n\t            var key = keys[index++];\n\t            return keysOnly ? key : [key, o[key]];\n\t        } else throw { name: \"StopIteration\" };\n\t    };\n\t    this.hasNext = function hasNext() {\n\t        return index < keys.length;\n\t    };\n\t}\n\t\n\t\n\t\n\tvar lang = { name: 'JavaScript', birthYear: 1995 };  \n\tvar it = Iterator(lang);\n\twhile(it.hasNext()) {\n\t    alert(it.next());\n\t}\n\t//alert(it.next()); // A StopIteration exception is thrown  \n\t\n\t\n\tvar langs = ['JavaScript', 'Python', 'C++'];  \n\tvar it = Iterator(langs);\n\twhile(it.hasNext()) {\n\t    alert(it.next());\n\t}\n\t//alert(it.next()); // A StopIteration exception is thrown  \n\t",
  "lastActivityDate": "2014-01-07T14:04:04.123",
  "title": "Javascript Iterator Class",
  "tags": [
    "javascript",
    "iterator"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201401",
  "itemTally": 0,
  "owner": null
}