{
  "id": "/questions/2451214",
  "creationDate": "2014-03-18T07:33:07.913",
  "body": "\n\nWhy is the Child class's converter constructor called in the code below?\n\nI mean, it automatically converts Base to Child via the Child converter constructor. The code below compiles, but shouldn't it *not* compile since I haven't provided `bool Child::operator!=(Base const&)`?\n\n\tclass Base\n\t{\n\t};\n\t\n\tclass Child : public Base\n\t{\n\tpublic:\n\t  Child() {}\n\t  Child(Base const& base_) :\n\t    Base(base_)\n\t  {\n\t    std::cout <<\"should never called!\";\n\t  }\n\t  bool operator!=(Child const&)\n\t  {\n\t    return true;\n\t  }\n\t};\n\t\n\tvoid main()\n\t{\n\t  Base  base;\n\t  Child child;\n\t\n\t  if(child != base)\n\t    std::cout << \"not equal\";\n\t  else\n\t    std::cout << \"equal\";\n\t}\n\t",
  "lastActivityDate": "2014-03-18T08:22:43.750",
  "title": "C++ Why is the converter constructor implicitly called?",
  "tags": [
    "c++"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201403",
  "itemTally": 0,
  "owner": null
}