{
  "id": "/questions/2838889",
  "creationDate": "2014-05-17T12:08:24.080",
  "body": "\n\nIs there a more pythonic way of doing this?  I am trying to find the eight neighbours of an integer coordinate lying within an extent.  I am interested in reducing its verbosity without sacrificing execution speed.\n\n\tdef fringe8((px, py), (x1, y1, x2, y2)):\n\t    f = [(px - 1, py - 1),\n\t         (px - 1, py),\n\t         (px - 1, py + 1),\n\t         (px, py - 1),\n\t         (px, py + 1),\n\t         (px + 1, py - 1),\n\t         (px + 1, py),\n\t         (px + 1, py + 1)]\n\t    f_inrange = []\n\t    for fx, fy in f:\n\t        if fx < x1:  continue\n\t        if fx >= x2: continue\n\t        if fy < y1:  continue\n\t        if fy >= y2: continue\n\t        f_inrange.append((fx, fy))\n\t    return f_inrange\n\t",
  "lastActivityDate": "2014-05-25T12:08:09.937",
  "title": "How can this verbose, unpythonic routine be improved?",
  "tags": [
    "refactoring",
    "code-review",
    "python"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201405",
  "itemTally": 0,
  "owner": null
}