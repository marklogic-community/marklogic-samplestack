{
  "id": "/questions/2264109",
  "creationDate": "2014-02-17T21:04:26.903",
  "body": "\n\nI wrote a custom XML reader because I needed something that would not read ahead from the source stream.  I wanted the ability to have an object read its data from the stream without negatively affecting the stream for the parent object.  That way, the stream can be passed down the object tree.\n\nIt's a minimal implementation, meant only to serve the purpose of the project that uses it (right now).  It works well enough, except for one method -- `ReadString`.  That method is used to read the current element's content as a string, stopping when the end element is reached.  It determines this by counting nesting levels.  Meanwhile, it's reading from the stream, character by character, adding to a StringBuilder for the resulting string.\n\nFor a collection element, this can take a long time.  I'm sure there is much that can be done to better implement this, so this is where my continuing education begins once again.  I could really use some help/guidance.  Some notes about methods it calls:\n\n`Read` - returns the next byte in the stream or -1.\n\n`ReadUntilChar` - calls `Read` until the specified character or -1 is reached, appending to a string with StringBuilder.\n\nWithout further ado, here is my two-legged turtle.  Constants have been replaced with the actual values.\n\n\tpublic string ReadString() {\n\t    int level = 0;\n\t    long originalPosition = m_stream.Position;\n\t    StringBuilder sb = new StringBuilder();\n\t    sbyte read;\n\t    try {\n\t        // We are already within the element that contains the string.\n\t        // Read until we reach an end element when the level == 0.\n\t        // We want to leave the reader positioned at the end element.\n\t        do {\n\t            sb.Append(ReadUntilChar('<'));\n\t            if((read = Read()) == '/') {\n\t                // End element\n\t                if(level == 0) {\n\t                    // End element for the element in context, the string is complete.\n\t                    // Replace the two bytes of the end element read.\n\t                    m_stream.Seek(-2, System.IO.SeekOrigin.Current);\n\t                    break;\n\t                } else {\n\t                    // End element for a child element.\n\t                    // Add the two bytes read to the resulting string and continue.\n\t                    sb.Append('<');\n\t                    sb.Append('/');\n\t                    level--;\n\t                }\n\t            } else {\n\t                // Start element\n\t                level++;\n\t                sb.Append('<');\n\t                sb.Append((char)read);\n\t            }\n\t        } while(read != -1);\n\t\n\t        return sb.ToString().Trim();\n\t    } catch {\n\t        // Return to the original position that we started at.\n\t        m_stream.Seek(originalPosition - m_stream.Position, System.IO.SeekOrigin.Current);\n\t        throw;\n\t    }\n\t}\n\t",
  "lastActivityDate": "2014-07-27T17:56:37.533",
  "title": "My custom XML reader is a two-legged turtle. Suggestions?",
  "tags": [
    "c#",
    "xml",
    "parsing"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201407",
  "itemTally": 0,
  "owner": null
}