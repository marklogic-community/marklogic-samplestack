{
  "id": "/questions/2646960",
  "creationDate": "2014-04-18T00:03:56.737",
  "body": "\n\nIn a simple inheritance tree, an abstract superclass has two subclasses.\n\nThe subclasses both store a key-value pair, but  but one will be holding a type Encrypted String, and the other one a plain old String. \n\nNow, my question is can I do this:\n\n\t@Entity\n\t@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n\tpublic abstract Attribute {\n\t    @Id\n\t    private Integer id;\n\t\n\t    @Column(name=\"attribute_key\")\n\t    private String key;\n\t}\n\t\n\t@Entity\n\tpublic EncryptedAttribute extends Attribute {\n\t    @Column(name=\"attribute_value\")\n\t    private EncryptedString encryptedValue;\n\t}\n\t\n\t@Entity\n\tpublic UnEncryptedAttribute extends Attribute {\n\t    @Column(name=\"attribute_value\")\n\t    private String plainValue;        \n\t}\n\t\n\nThe Encrypted String and plain String should both end up as varchars in the db, but can I store persistent attributes associated with different sub-classes in the same column? This would avoid the \"swiss-cheese\" side-effect of storing null values in columns which aren't used in a particular row.",
  "lastActivityDate": "2014-04-18T05:03:11.223",
  "title": "Can I reuse a column across subclasses in a Hibernate table-per-hierarchy inheritance strategy?",
  "tags": [
    "java",
    "hibernate",
    "inheritance"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201404",
  "itemTally": 0,
  "owner": null
}