{
  "id": "/questions/2265869",
  "creationDate": "2014-02-18T04:29:37.517",
  "body": "\n\nWhy, oh why doesn't `java.util.concurrent` provide a queue length indicators for  its `ExecutorService`s? Recently I found myself doing something like this:\n\n\tExecutorService queue = Executors.newSingleThreadExecutor();\n\tAtomicInteger queueLength = new AtomicInteger();\n\t...\n\t\n\tpublic void addTaskToQueue(Runnable runnable) {\n\t    if (queueLength.get() < MAX_QUEUE_LENGTH) {\n\t        queueLength.incrementAndGet(); // Increment queue when submitting task.\n\t        queue.submit(new Runnable() {\n\t            public void run() {\n\t                runnable.run();\n\t                queueLength.decrementAndGet(); // Decrement queue when task done.\n\t            }\n\t        });\n\t    } else {\n\t        // Trigger error: too long queue\n\t    }\n\t}\n\t\n\nWhich works ok, but... I think this really should be implemented as a part of the `ExecutorService`. It's dumb and error prone to carry around a counter *separated* from the actual queue, whose length the counter is supposed to indicate (reminds me of C arrays). But, `ExecutorService`s are obtained via static factory methods, so there's no way to simply extend the otherwise excellent single thread executor and add a queue counter. So what should I do:\n1. Reinvent stuff already implemented in JDK?\n2. Other clever solution?",
  "lastActivityDate": "2014-02-18T09:36:55.763",
  "title": "Elegantly implementing queue length indicators to ExecutorServices",
  "tags": [
    "java",
    "concurrency",
    "queue",
    "executorservice",
    "executor"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201402",
  "itemTally": 0,
  "owner": null
}