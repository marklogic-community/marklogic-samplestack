{
  "id": "/questions/2445653",
  "creationDate": "2014-03-17T15:36:23.677",
  "body": "\n\nI have to extend an OpenGL-Rendering system to support international characters (especially Hebrew, Arabic  and cyrillic).\n\nDevelopment platform is Windows(XP|Vista|7), alas using Embercardero Delphi 2010.\n\nI currently use wglOutLineFont(...) to build my font's display list and `glCallLists(length(m_Text), UNSIGNED_SHORT, PWchar(m_Text) )` to render my strings.\n\nWhile this is feasible for Latin-1 Characters, building the full Unicode character set in advance is pretty time-consuming (about 8.5 minutes on my machine), so I am looking for a more efficient solution. I thought about limiting the range from u+0020 - u+077f (Latin, Greek, Cyrillic, Arabic and Hebrew) to include just the glyphs I need, but that would just be a solution for my current needs, and will become insufficient once other encoding is needed. \n\nOn the upside, I do not have to worry about left-to right or right-to left direction as our application can handle this already.\n\nI would expect this to be a well-known problem, so I would like to ask if there is any reference material on this on the web, or if you could share some insight on this? \n\n**Edit**\nA clarification: I use a polygonal font representations. Each Font is constructed at unit size (1.0) in advance and scaled appropriately using `glScalef(...)` before rendering. I did decide against pre-rasterizing since the users might zoom in quite closely (The application is used for CAD), so rastering artifacts would become visible. \n\nAdditionally, since a scene seldom exceeds more then a few hundred characters (mainly labels and measurements), the speed gain from pre-rasterization is negligible.",
  "lastActivityDate": "2014-12-22T16:29:44.683",
  "title": "Multilangual Unicode rendering in opengl",
  "tags": [
    "delphi",
    "winapi",
    "opengl",
    "unicode"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201412",
  "itemTally": 0,
  "owner": null
}