{
  "id": "/questions/2266095",
  "creationDate": "2014-02-18T05:09:41.763",
  "body": "\n\nI'm currently making a scanner for a basic compiler I'm writing in Haskell. One of the requirements is that any character enclosed in single quotes (') is translated into a character literal token (type T_Char), and this includes escape sequences such as '\\n' and '\\t'. I've defined this part of the scanner function which works okay for most cases:\n\n\tscanner ('\\'':cs)       |   (length cs) == 0            =   error \"Illegal character!\"\n\t                         |  head cs == '\\\\'             =   mkEscape (head (drop 1 cs)) : scanner (drop 3 cs)\n\t                         |  head (drop 1 cs) == '\\''    =   T_Char (head cs) : scanner (drop 2 cs)\n\t\n\t\n\t                         where\n\t                            mkEscape        :: Char -> Token\n\t                            mkEscape 'n'    = T_Char '\\n'\n\t                            mkEscape 'r'    = T_Char '\\r'\n\t                            mkEscape 't'    = T_Char '\\t'\n\t                            mkEscape '\\\\'   = T_Char '\\\\'\n\t                            mkEscape '\\''   = T_Char '\\''\n\t\n\nHowever, this comes up when I run it in GHCi:\n\n\tMain> scanner \"abc '\\\\' def\"\n\t[T_Id \"abc\", T_Char '\\'', T_Id \"def\"]\n\t\n\nIt can recognise everything else but gets escaped backslashes confused with escaped single quotes. Is this something to do with character encodings?",
  "lastActivityDate": "2014-09-21T10:26:41.050",
  "title": "Haskell: Parsing escape characters in single quotes",
  "tags": [
    "parsing",
    "haskell",
    "character-encoding"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201409",
  "itemTally": 0,
  "owner": null
}