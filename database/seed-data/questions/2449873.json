{
  "id": "/questions/2449873",
  "creationDate": "2014-03-18T03:30:34.300",
  "body": "\n\nI don't know if its possible or not, but here's what I need.\nI'm toying around with something and want to know if its possible since you can't create your own data type based on a sealed type such as int, Int32, Int64, etc.\n\nI want to create a top-level class that is defined of a given type with some common stuff.  Then, derive this into two subclasses, but in this case, each class is based on either and int or Int64 type.  From THAT instance, create an instance of either one and know its yped basis for parameter referenc / return settings.\n\nSo when I need to create an instance of the \"ThisClass\", I don't have to know its type basis of either int or Int64, yet IT will know the type and be able to allow methods/functions to be called with the typed... This way, If I want to change my ThisClass definition from SubLevel1 to SubLevel2, I don't have to dance around all different data type definitions.\n\nHope this makes sense..\n\n\tpublic class TopLevel<T>\n\t{\n\t ... \n\t}\n\t\n\tpubic class SubLevel1 : TopLevel<int>\n\t{ ...\n\t}\n\t\n\tpublic class SubLevel2 : TopLevel<Int64>\n\t{ ...\n\t}\n\t\n\tpublic class ThisClass : SubLevel1\n\t{ ...\n\t   public <based on the Int data type from SubLevel1> SomeFunc()\n\t   {  \n\t      return <the Int value computed>;\n\t   }\n\t}\n\t",
  "lastActivityDate": "2014-03-18T03:43:45.877",
  "title": "Reference inherited class's <T>ype in a derived class",
  "tags": [
    "c#",
    "class",
    "derived"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201403",
  "itemTally": 0,
  "owner": null
}