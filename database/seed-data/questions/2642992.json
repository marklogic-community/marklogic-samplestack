{
  "id": "/questions/2642992",
  "creationDate": "2014-04-17T13:41:25.843",
  "body": "\n\nI have a panel with transparent background which i use to draw an image. now problem here is when i draw anything on panel and save the image as a JPEG file its saving the image with black background but i want it to be saved as same, as i draw on the panel. what should be done for this? plz guide me\n\nj\nClient.java\n\n\tpublic class Client extends Thread \n\t{\n\t    static DatagramSocket datasocket;\n\t     static DatagramSocket socket;\n\t    Point point;\n\t    Whiteboard board;  \n\t    Virtualboard virtualboard;\n\t    JLayeredPane layerpane;\n\t\n\t    BufferedImage image;\n\t    public Client(DatagramSocket datasocket)\n\t    {\n\t            Client.datasocket=datasocket;\n\t    }\n\t    //This function is responsible to connect to the server \n\t    public static void connect()\n\t    {\n\t        try\n\t        {           \n\t            socket=new DatagramSocket (9000); //client connection socket port= 9000\n\t            datasocket=new DatagramSocket (9005); //client data socket port= 9002\n\t            ByteArrayOutputStream baos=new ByteArrayOutputStream();\n\t            DataOutputStream dos=new DataOutputStream(baos);\n\t            //this is to tell server that this is a connection request\n\t            dos.writeChar('c');\n\t            dos.close();\n\t            byte[]data=baos.toByteArray();\n\t            //Server IP address\n\t            InetAddress ip=InetAddress.getByName(\"10.123.97.154\");\n\t            //create the UDP packet\n\t            DatagramPacket packet=new DatagramPacket(data, data.length,ip , 8000);\n\t            socket.send(packet);\n\t            Client client=new Client(datasocket);\n\t            client.createFrame();\n\t            client.run();\n\t        }\n\t        catch(Exception e)\n\t        {\n\t            e.printStackTrace();\n\t        }\n\t    }\n\t    //This function is to create the JFrame \n\t    public void createFrame()\n\t    {       \n\t         JFrame frame=new JFrame(\"Whiteboard\");\n\t\n\t         frame.setVisible(true);\n\t         frame.setBackground(Color.black);\n\t         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t         frame.setSize(680,501);\n\t         frame.addWindowListener(new WindowAdapter() \n\t         {\n\t             public void windowOpened(WindowEvent e) {}\n\t             public void windowClosing(WindowEvent e) \n\t             {               \n\t                 close();\n\t             }          \n\t         });                 \n\t\n\t         layerpane=frame.getLayeredPane();\n\t         board= new Whiteboard(datasocket); \n\t\n\t         image = new BufferedImage(590,463, BufferedImage.TYPE_INT_ARGB);\n\t         board.setBounds(74,2,590,463);\n\t         board.setImage(image);\n\t         virtualboard=new Virtualboard();\n\t         virtualboard.setImage(image);\n\t         virtualboard.setBounds(74,2,590,463);\n\t\n\t        layerpane.add(virtualboard,new Integer(2));//Panel where remote user draws \n\t        layerpane.add(board,new Integer(3));\n\t        layerpane.add(board.colourButtons(),new Integer(1));\n\t        layerpane.add(board.shapeButtons(),new Integer(0));\n\t\n\t        //frame.add(paper.addButtons(),BorderLayout.WEST);\n\t    }\n\t\n\t    /*\n\t     * This function is overridden from the thread class\n\t     * This function listens for incoming packets from the server \n\t     * which contains the points drawn  by the other client\n\t    */\n\t    public void run () \n\t    {       \n\t            while (true) \n\t            {\n\t                try \n\t                {\n\t                    byte[] buffer = new byte[512];\n\t                    DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n\t                    datasocket.receive(packet);\n\t                    InputStream in=new ByteArrayInputStream(packet.getData(), packet.getOffset(),packet.getLength());\n\t                    DataInputStream din=new DataInputStream(in);              \n\t                    int x=din.readInt();\n\t                    int y=din.readInt();\n\t                    String varname=din.readLine();\n\t                    String var[]=varname.split(\"-\",4);\n\t                    point=new Point(x,y);\n\t                    virtualboard.addPoint(point, var[0], var[1],var[2],var[3]);                 \n\t              }\n\t                catch (IOException ex) \n\t                {\n\t                    ex.printStackTrace();\n\t                }\n\t        }       \n\t    }\n\t\n\t    //This function is to broadcast the newly drawn point to the server \n\t    public   void  broadcast (Point p,String varname,String shape,String event, String color) \n\t    {\n\t        try\n\t        {\n\t            ByteArrayOutputStream baos=new ByteArrayOutputStream();\n\t            DataOutputStream dos=new DataOutputStream(baos);\n\t            dos.writeInt(p.x);\n\t            dos.writeInt(p.y);\n\t            dos.writeBytes(varname);\n\t            dos.writeBytes(\"-\");\n\t            dos.writeBytes(shape);\n\t            dos.writeBytes(\"-\");\n\t            dos.writeBytes(event);\n\t            dos.writeBytes(\"-\");\n\t            dos.writeBytes(color);\n\t            dos.close();\n\t            byte[]data=baos.toByteArray();\n\t            InetAddress ip=InetAddress.getByName(\"10.123.97.154\");\n\t            DatagramPacket packet=new DatagramPacket(data, data.length,ip , 8002);\n\t            datasocket.send(packet);\n\t        }\n\t        catch (Exception e) \n\t        {\n\t            e.printStackTrace();\n\t        }\n\t    }\n\t     //This function is to close the client's connection with the server \n\t    public void close() \n\t    {\n\t        try\n\t        {\n\t            ByteArrayOutputStream baos=new ByteArrayOutputStream();\n\t            DataOutputStream dos=new DataOutputStream(baos);\n\t            //This is to tell server that this is request to remove  the client\n\t            dos.writeChar('r');\n\t            dos.close();\n\t            byte[]data=baos.toByteArray();\n\t            //Server IP address\n\t            InetAddress ip=InetAddress.getByName(\"10.123.97.154\");\n\t            DatagramPacket packet=new DatagramPacket(data, data.length,ip , 8000);\n\t            socket.send(packet);\n\t            System.out.println(\"closed\");\n\t        }\n\t        catch(Exception e)\n\t        {\n\t            e.printStackTrace();\n\t        }\n\t    }\n\t    public static  void main(String[] args) throws Exception  \n\t    {            \n\t        connect();\n\t    }\n\t\n\t}\n\t\n\nWhiteboard.java\n\n\tclass   Whiteboard extends JPanel implements MouseListener,MouseMotionListener,ActionListener,KeyListener\n\t{\n\t    BufferedImage image;\n\t    Boolean tooltip=false;\n\t    int post;\n\t    String shape;\n\t    String selectedcolor=\"black\";\n\t    Color color=Color.black;\n\t    //Color color=Color.white;\n\t    Point start;\n\t    Point end;\n\t    Point mp;\n\t    Point tip;\n\t    int keycode;\n\t    String fillshape;\n\t    Point fillstart=new Point();\n\t    Point fillend=new Point();\n\t    int noofside;\n\t    Button r=new Button(\"rect\");\n\t    Button rectangle=new Button(\"rect\");\n\t    Button line=new Button(\"line\");\n\t    Button roundrect=new Button(\"roundrect\");\n\t    Button polygon=new Button(\"poly\");\n\t    Button text=new Button(\"text\");\n\t    JButton save=new JButton(\"Save\");\n\t    Button elipse=new Button(\"elipse\");\n\t    ImageIcon fillicon=new ImageIcon(\"images/fill.jpg\");\n\t    JButton fill=new JButton(fillicon); \n\t    ImageIcon erasericon=new ImageIcon(\"images/eraser.gif\");\n\t    JButton erase=new JButton(erasericon);\n\t    JButton[] colourbutton=new JButton[28];\n\t    String selected;\n\t    Point label;\n\t    String key=\"\";\n\t    int ex,ey;//eraser\n\t    DatagramSocket dataSocket;\n\t    JButton button = new JButton(\"test\");\n\t    Client client;\n\t    Boolean first;\n\t    int w,h;\n\t    public Whiteboard(DatagramSocket dataSocket) \n\t    {        \n\t        try \n\t        {           \n\t            UIManager.setLookAndFeel(\n\t                    UIManager.getCrossPlatformLookAndFeelClassName());\n\t\n\t        } \n\t        catch (Exception e) \n\t        {\n\t            e.printStackTrace();\n\t        }\n\t\n\t        setLayout(null);\n\t        setOpaque(false);\n\t        setBackground(new Color(237,237,237));\n\t        this.dataSocket=dataSocket;\n\t        client=new Client(dataSocket);\n\t        addKeyListener(this);\n\t        addMouseListener(this);\n\t        addMouseMotionListener(this);\n\t        setBorder(BorderFactory.createLineBorder(Color.black));            \n\t    }\n\t       public  void paintComponent(Graphics g) \n\t       {          \n\t        try\n\t        {           \n\t            super.paintComponent(g);\n\t            g.drawImage(image, 0, 0, this);\n\t            Graphics2D g2 = (Graphics2D)g;\n\t            if(color!=null)\n\t            g2.setPaint(color);\n\t            if(start!=null && end!=null)\n\t            {\n\t                if(selected==(\"elipse\"))\n\t                    g2.drawOval(start.x, start.y,(end.x-start.x),(end.y-start.y));\n\t                else if(selected==(\"rect\"))\n\t                    g2.drawRect(start.x, start.y, (end.x-start.x),(end.y-start.y));\n\t                else if(selected==(\"rrect\"))\n\t                    g2.drawRoundRect(start.x, start.y, (end.x-start.x),(end.y-start.y),11,11);\n\t                else if(selected==(\"line\"))\n\t                    g2.drawLine(start.x,start.y,end.x,end.y);\n\t                else if(selected==(\"poly\"))\n\t                {\n\t                    g2.drawLine(start.x,start.y,end.x,end.y);\n\t                    client.broadcast(start, \"start\", \"poly\", \"drag\", selectedcolor);\n\t                    client.broadcast(end, \"end\", \"poly\", \"drag\", selectedcolor);\n\t                }\n\t            }\n\t\n\t            if(tooltip==true)\n\t            {  \n\t                System.out.println(selected);\n\t\n\t                if(selected==\"text\")\n\t                {\n\t                    g2.drawString(\"|\", tip.x, tip.y-5);\n\t                    g2.drawString(\"Click to add text\", tip.x+10, tip.y+23);\n\t                    g2.drawString(\"__\", label.x+post, label.y);\n\t                }\n\t\n\t                if(selected==\"erase\")\n\t                {\n\t                    g2.setPaint(new Color(237,237,237));\n\t                    g2.fillRect(tip.x-10,tip.y-10,10,10);\n\t                    g2.setPaint(color);\n\t                    g2.drawRect(tip.x-10,tip.y-10,10,10);\n\t\n\t                }\n\t            }\n\t\n\t        }\n\t            catch(Exception e)\n\t            {}\n\t    }\n\t    //Function to draw the shape on image\n\t    public  void draw()\n\t    {       \n\t        Graphics2D g2 = (Graphics2D) image.createGraphics();\n\t        Font font=new Font(\"Times New Roman\",Font.PLAIN,14);\n\t        g2.setFont(font);\n\t        g2.setPaint(color);\n\t        if(start!=null && end!=null)\n\t        {\n\t            if(selected==\"line\")\n\t                    g2.drawLine(start.x, start.y, end.x, end.y);\n\t            else if(selected==\"elipse\")\n\t                    g2.drawOval(start.x, start.y, (end.x-start.x),(end.y-start.y));\n\t            else if(selected==\"rect\")\n\t                    g2.drawRect(start.x, start.y, (end.x-start.x),(end.y-start.y));\n\t            else if(selected==(\"rrect\"))\n\t                g2.drawRoundRect(start.x, start.y, (end.x-start.x),(end.y-start.y),11,11);\n\t            else if(selected==(\"poly\"))\n\t            {\n\t                g2.drawLine(start.x,start.y,end.x,end.y);\n\t                client.broadcast(start, \"start\", \"poly\", \"release\", selectedcolor);\n\t                client.broadcast(end, \"end\", \"poly\", \"release\", selectedcolor);\n\t            }\n\t            fillstart=start;\n\t            fillend=end;\n\t            fillshape=selected;\n\t        }\n\t        if(selected!=\"poly\")\n\t        {\n\t            start=null;\n\t            end=null;\n\t        }\n\t        if(label!=null)\n\t        {\n\t            if(selected==(\"text\"))\n\t            {\n\t                g2.drawString(key,label.x,label.y);\n\t                client.broadcast(label, key, \"text\", \"release\", selectedcolor);\n\t            }\n\t        }\n\t        repaint();\n\t        g2.dispose();\n\t    } \n\t\n\t    //Function which provides the erase functionality\n\t    public  void erase() \n\t    {\n\t        Graphics2D pic=(Graphics2D) image.createGraphics();\n\t        Color erasecolor=new Color(237,237,237);\n\t        pic.setPaint(erasecolor);\n\t        if(start!=null)\n\t        pic.fillRect(start.x-10, start.y-10, 10, 10);\n\t    }\n\t    //To set the size of the image\n\t    public void setImage(BufferedImage image)\n\t    {\n\t        this.image = image;\n\t     }\n\t    //Function to add buttons into the panel, calling this function returns a panel  \n\t    public JPanel shapeButtons()\n\t    {       \n\t        JPanel shape=new JPanel();\n\t        shape.setBackground(new Color(181, 197, 210));\n\t        shape.setLayout(new GridLayout(5,2,2,4));\n\t        shape.setBounds(0, 2, 74, 166);\n\t\n\t        rectangle.addActionListener(this);\n\t        rectangle.setToolTipText(\"Rectangle\");\n\t        line.addActionListener( this);\n\t        line.setToolTipText(\"Line\");\n\t        erase.addActionListener(this);\n\t        erase.setToolTipText(\"Eraser\");\n\t        roundrect.addActionListener(this);\n\t        roundrect.setToolTipText(\"Round edge Rectangle\");\n\t        polygon.addActionListener(this);\n\t        polygon.setToolTipText(\"Polygon\");\n\t        text.addActionListener(this);\n\t        text.setToolTipText(\"Text\");\n\t        fill.addActionListener(this);\n\t        fill.setToolTipText(\"Fill with colour\");\n\t        elipse.addActionListener(this);\n\t        elipse.setToolTipText(\"Elipse\");\n\t        save.addActionListener(this);\n\t        shape.add(elipse);\n\t        shape.add(rectangle);\n\t        shape.add(roundrect);\n\t        shape.add(polygon);\n\t        shape.add(line);\n\t        shape.add(text);\n\t        shape.add(fill);\n\t        shape.add(erase);\n\t        shape.add(save);\n\t\n\t        return shape;\n\t    }\n\t\n\t    public JPanel colourButtons()\n\t    {\n\t        JPanel colourbox=new JPanel();\n\t\n\t        colourbox.setBackground(new Color(181, 197, 210));\n\t        colourbox.setLayout(new GridLayout(8,2,8,8));\n\t        colourbox.setBounds(0,323,70,140);\n\t        //colourbox.add(empty);\n\t        for(int i=0;i<16;i++)\n\t        {\n\t            colourbutton[i]=new JButton();\n\t            colourbox.add(colourbutton[i]);\n\t\n\t            if(i==0)\n\t                colourbutton[0].setBackground(Color.black);\n\t            else if(i==1)\n\t                colourbutton[1].setBackground(Color.white);\n\t            else if(i==2)\n\t                colourbutton[2].setBackground(Color.red);\n\t            else if(i==3)\n\t                colourbutton[3].setBackground(Color.orange);\n\t            else if(i==4)\n\t                colourbutton[4].setBackground(Color.blue);\n\t            else if(i==5)\n\t                colourbutton[5].setBackground(Color.green);\n\t            else if(i==6)\n\t                colourbutton[6].setBackground(Color.pink);\n\t            else if(i==7)\n\t                colourbutton[7].setBackground(Color.magenta);\n\t            else if(i==8)\n\t                colourbutton[8].setBackground(Color.cyan);\n\t            else if(i==9)\n\t                colourbutton[9].setBackground(Color.black);\n\t            else if(i==10)\n\t                colourbutton[10].setBackground(Color.yellow);\n\t            else if(i==11)\n\t                colourbutton[11].setBackground(new Color(131,168,43));\n\t            else if(i==12)\n\t                colourbutton[12].setBackground(new Color(132,0,210));\n\t            else if(i==13)\n\t                colourbutton[13].setBackground(new Color(193,17,92));\n\t            else if(i==14)\n\t                colourbutton[14].setBackground(new Color(129,82,50));\n\t            else if(i==15)\n\t                colourbutton[15].setBackground(new Color(64,128,128));\n\t\n\t            colourbutton[i].addActionListener(this);\n\t        }\n\t        return colourbox;\n\t    }\n\t    public void fill()\n\t    {\n\t        if(selected==\"fill\")\n\t        {\n\t            Graphics2D g2 = (Graphics2D) image.getGraphics();\n\t\n\t            g2.setPaint(color);\n\t            System.out.println(\"Fill\");\n\t             if(fillshape==\"elipse\")\n\t                g2.fillOval(fillstart.x, fillstart.y, (fillend.x-fillstart.x),(fillend.y-fillstart.y));\n\t             else if(fillshape==\"rect\")\n\t                g2.fillRect(fillstart.x, fillstart.y, (fillend.x-fillstart.x),(fillend.y-fillstart.y));\n\t             else if(fillshape==(\"rrect\"))\n\t                g2.fillRoundRect(fillstart.x, fillstart.y, (fillend.x-fillstart.x),(fillend.y-fillstart.y),11,11);\n\t            // else if(fillshape==(\"poly\"))\n\t            //   g2.drawPolygon(x,y,2);         \n\t        }\n\t        repaint();\n\t    }\n\t   //To save the image drawn\n\t    public void save()\n\t    {\n\t        try \n\t        {\n\t            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n\t            JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(bos);\n\t            JFileChooser fc = new JFileChooser();\n\t            fc.showSaveDialog(this);        \n\t            encoder.encode(image);\n\t            byte[] jpgData = bos.toByteArray();\n\t            FileOutputStream fos = new FileOutputStream(fc.getSelectedFile()+\".jpeg\");\n\t            fos.write(jpgData);\n\t            fos.close();\n\t            //add replce confirmation here          \n\t        } \n\t        catch (IOException e) \n\t        {           \n\t            System.out.println(e);\n\t        }\n\t    }\n\t    public void mouseClicked(MouseEvent e) \n\t    {\n\t\n\t    }\n\t    @Override\n\t    public void mouseEntered(MouseEvent e) \n\t    {\n\t\n\t    }\n\t    public void mouseExited(MouseEvent arg0) {\n\t\n\t    }\n\t    public void mousePressed(MouseEvent e) \n\t    {\n\t            if(selected==\"line\"||selected==\"text\")\n\t            {\n\t                start=e.getPoint();\n\t                client.broadcast(start,\"start\", selected,\"press\", selectedcolor);\n\t            }\n\t            else if(selected==\"elipse\"||selected==\"rect\"||selected==\"rrect\")\n\t                mp = e.getPoint();\n\t            else if(selected==\"poly\")\n\t            {\n\t                if(first==true)\n\t                {\n\t                    start=e.getPoint();\n\t                    //client.broadcast(start,\"start\", selected,\"press\", selectedcolor);\n\t                }\n\t                else if(first==false)\n\t                {\n\t                    end=e.getPoint();\n\t                    repaint();\n\t                    //client.broadcast(end,\"end\", selected,\"press\", selectedcolor);\n\t                }\n\t            }\n\t            else if(selected==\"erase\")\n\t            {\n\t                start=e.getPoint();\n\t                erase();\n\t            }\n\t    }\n\t    public void mouseReleased(MouseEvent e) \n\t    {\n\t        if(selected==\"text\")\n\t        {\n\t            System.out.println(\"Reset\");\n\t            key=\"\";\n\t            post=0;\n\t            label=new Point();\n\t            label=e.getPoint();\n\t            grabFocus();\n\t        }\n\t        if(start!=null && end!=null)\n\t        {\n\t            if(selected==\"line\")\n\t            {\n\t                end=e.getPoint();           \n\t                client.broadcast(end,\"end\", selected,\"release\", selectedcolor);\n\t                draw();\n\t            }\n\t            else if(selected==\"elipse\"||selected==\"rect\"||selected==\"rrect\")\n\t            {\n\t                end.x = Math.max(mp.x,e.getX());\n\t                end.y = Math.max(mp.y,e.getY());\n\t                client.broadcast(end,\"end\", selected,\"release\", selectedcolor);\n\t                draw();\n\t            }           \n\t            else if(selected==\"poly\")\n\t            {               \n\t                draw();\n\t                first=false;\n\t                start=end;\n\t                end=null;\n\t            }           \n\t        }       \n\t    } \n\t    public void mouseDragged(MouseEvent e) \n\t    {\n\t        if(end==null)\n\t            end = new Point();\n\t\n\t        if(start==null)\n\t                start = new Point();\n\t\n\t         if(selected==\"line\")\n\t         {\n\t            end=e.getPoint();\n\t            client.broadcast(end,\"end\", selected,\"drag\", selectedcolor);\n\t         }\n\t        else if(selected==\"erase\")\n\t        {\n\t             start=e.getPoint();\n\t             erase();\n\t            client.broadcast(start,\"start\", selected,\"drag\", selectedcolor);\n\t        }\n\t        else if(selected==\"elipse\"||selected==\"rect\"||selected==\"rrect\")\n\t        {\n\t            start.x = Math.min(mp.x,e.getX());\n\t            start.y = Math.min(mp.y,e.getY());\n\t            end.x = Math.max(mp.x,e.getX());\n\t            end.y = Math.max(mp.y,e.getY());\n\t            client.broadcast(start,\"start\", selected,\"drag\", selectedcolor);\n\t            client.broadcast(end,\"end\", selected,\"drag\", selectedcolor);\n\t        }\n\t        else if(selected==\"poly\")\n\t            end=e.getPoint();\n\t        System.out.println(tooltip);\n\t        if(tooltip==true)\n\t        {               \n\t\n\t            if(selected==\"erase\")\n\t            {\n\t                Graphics2D g2=(Graphics2D) getGraphics();\n\t                tip=e.getPoint();\n\t                g2.drawRect(tip.x-10,tip.y-10,10,10);\n\t            }           \n\t        }\n\t        repaint();\n\t    }\n\t    public void mouseMoved(MouseEvent e)    \n\t    {   \n\t        if(selected==\"text\" ||selected==\"erase\")\n\t        {\n\t            tip=new Point();\n\t            tip=e.getPoint();\n\t            tooltip=true;\n\t            repaint();\n\t        }\n\t    } \n\t    public void actionPerformed(ActionEvent e) \n\t    {\n\t        if(e.getSource()==elipse)\n\t            selected=\"elipse\";\n\t        else if(e.getSource()==line)\n\t            selected=\"line\";    \n\t        else if(e.getSource()==rectangle)\n\t            selected=\"rect\";\n\t        else if(e.getSource()==erase)\n\t        {\n\t            selected=\"erase\";\n\t            tooltip=true;\n\t            System.out.println(selected);\n\t            erase();\n\t        }\n\t        else if(e.getSource()==roundrect)\n\t                selected=\"rrect\";\n\t        else if(e.getSource()==polygon)\n\t        {\n\t            selected=\"poly\";\n\t            first=true;\n\t            start=null;\n\t        }\n\t        else if(e.getSource()==text)\n\t        {\n\t            selected=\"text\";\n\t            tooltip=true;\n\t        }\n\t        else if(e.getSource()==fill)\n\t        {\n\t            selected=\"fill\";\n\t            fill();         \n\t        }\n\t        else if(e.getSource()==save)\n\t            save();\n\t\n\t        if(e.getSource()==colourbutton[0])\n\t        {\n\t            color=Color.black;\n\t            selectedcolor=\"black\";\n\t        }\n\t        else if(e.getSource()==colourbutton[1])\n\t        {\n\t            color=Color.white;\n\t            selectedcolor=\"white\";\n\t        }\n\t        else if(e.getSource()==colourbutton[2])\n\t        {\n\t            color=Color.red;\n\t            selectedcolor=\"red\";\n\t        }\n\t        else if(e.getSource()==colourbutton[3])\n\t        {\n\t            color=Color.orange;\n\t            selectedcolor=\"orange\";\n\t        }\n\t        else if(e.getSource()==colourbutton[4])\n\t        {           \n\t            selectedcolor=\"blue\";\n\t            color=Color.blue;\n\t        }\n\t        else if(e.getSource()==colourbutton[5])\n\t        {\n\t            selectedcolor=\"green\";\n\t            color=Color.green;\n\t        }\n\t        else if(e.getSource()==colourbutton[6])\n\t        {\n\t            selectedcolor=\"pink\";\n\t            color=Color.pink;\n\t        }\n\t        else if(e.getSource()==colourbutton[7])\n\t        {\n\t            selectedcolor=\"magenta\";\n\t            color=Color.magenta;\n\t        }\n\t        else if(e.getSource()==colourbutton[8])\n\t        {\n\t            selectedcolor=\"cyan\";\n\t            color=Color.cyan;\n\t        }\n\t    }\n\t    @Override\n\t    public void keyPressed(KeyEvent e) \n\t    {\n\t        //System.out.println(e.getKeyChar()+\" : \"+e.getKeyCode());\n\t\n\t        if(label!=null)\n\t        {\n\t            if(e.getKeyCode()==10) //Check for Enter key\n\t            {\n\t                label.y=label.y+14;\n\t                key=\"\";\n\t                post=0;\n\t                repaint();\n\t            }\n\t            else if(e.getKeyCode()==8) //Backspace\n\t            {\n\t                try{\n\t                Graphics2D g2 = (Graphics2D) image.getGraphics();\n\t                g2.setPaint(new Color(237,237,237));\n\t                g2.fillRect(label.x+post-7, label.y-13, 14, 17);\n\t                if(post>0)\n\t                post=post-6;\n\t                keycode=0;\n\t                key=key.substring(0, key.length()-1);\n\t                System.out.println(key.substring(0, key.length()));\n\t                repaint();\n\t                Point broadcastlabel=new Point();\n\t                broadcastlabel.x=label.x+post-7;\n\t                broadcastlabel.y=label.y-13;\n\t                client.broadcast(broadcastlabel, key, \"text\", \"backspace\", selectedcolor);\n\t                }\n\t                catch(Exception ex)\n\t                {}\n\t            }\n\t            //Block invalid keys\n\t            else if(!(e.getKeyCode()>=16 && e.getKeyCode()<=20 \n\t                        || e.getKeyCode()>=112 && e.getKeyCode()<=123\n\t                        || e.getKeyCode()>=33 && e.getKeyCode()<=40\n\t                        || e.getKeyCode()>=144 && e.getKeyCode()<=145\n\t                        || e.getKeyCode()>=524 && e.getKeyCode()<=525\n\t                        ||e.getKeyCode()==27||e.getKeyCode()==155\n\t                        ||e.getKeyCode()==127))\n\t            {\n\t                key=key+e.getKeyChar();\n\t                post=post+6;\n\t                draw();\n\t            }\n\t        }\n\t    }\n\t    @Override\n\t    public void keyReleased(KeyEvent e) \n\t    {\n\t\n\t    }\n\t    @Override\n\t    public void keyTyped(KeyEvent e) \n\t    {\n\t\n\t    }\n\t} \n\t\n\tclass Button extends JButton\n\t{\n\t    String name;\n\t    int i;\n\t    public Button(String name) \n\t    {\n\t        this.name=name;         \n\t        try \n\t        {\n\t            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n\t        } \n\t        catch (Exception e) \n\t        {\n\t            e.printStackTrace();\n\t        }\n\t    }\n\t    public Button(int i) \n\t    {\n\t        this.i=i;\n\t    }\n\t    public void paintComponent(Graphics g)\n\t    {\n\t        super.paintComponent(g);\n\t        Graphics2D g2 = (Graphics2D)g;\n\t        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\t        //g2.setStroke(new BasicStroke(1.2f));\n\t        if (name == \"line\")     g.drawLine(5,5,30,30);   \n\t        if (name == \"elipse\") g.drawOval(5,7,25,20);\n\t        if (name== \"rect\") g.drawRect(5,5,25,23);\n\t        if (name== \"roundrect\") g.drawRoundRect(5,5,25,23,10,10);\n\t        int a[]=new int[]{20,9,20,23,20};\n\t        int b[]=new int[]{9,23,25,20,9};\n\t        if (name== \"poly\") g.drawPolyline(a, b, 5);\n\t        if (name== \"text\") g.drawString(\"Text\",8, 24);\n\t\n\t    }\n\t}\n\t",
  "lastActivityDate": "2014-04-17T13:56:31.103",
  "title": "How to save image drawn on a JPanel?",
  "tags": [
    "java",
    "swing"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201404",
  "itemTally": 0,
  "owner": null
}