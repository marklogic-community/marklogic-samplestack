{
  "id": "/questions/3042138",
  "creationDate": "2014-06-17T10:18:31.090",
  "body": "\n\nI'm using Tomcat as a servlet container, and have many WARs deployed.  Many of the WARs share common base classes, which are replicated in each context due to the different classloaders, etc.\n\nHow can I ensure resource cleanup on context destruction, without hooking each and every web.xml file to add context listeners?\n\nIdeally, I'd like something along the lines of \n\n\tclass MyResourceHolder implements SomeListenerInterface {\n\t    private SomeResource resource;\n\t    {\n\t        SomeContextThingie.registerDestructionListener(this);\n\t    }\n\t    public void onDestroy() { resource.close(); }\n\t}\n\t\n\nI **could** put something in each web.xml, but since there are potentially many WARs and only ones that actually initialize the resource need to clean it up, it seems more natural to register for cleanup when the resource is initialized rather than duplicating a lot of XML configuration and then **maybe** cleaning up.\n\n(In this particular case, I'm initiating an orderly shutdown of a SQL connection pool.  But I see this being useful in many other situations as well...)\n\nI'm sure there's some blisteringly obvious solution out there, but my Google-fu is failing me right now.  Thanks!",
  "lastActivityDate": "2014-04-14T00:40:37.953",
  "title": "Managing resource closure in a servlet container",
  "tags": [
    "java",
    "tomcat",
    "servlets"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201404",
  "itemTally": 0,
  "owner": null
}