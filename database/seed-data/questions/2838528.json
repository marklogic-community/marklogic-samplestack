{
  "id": "/questions/2838528",
  "creationDate": "2014-05-17T09:23:27.937",
  "body": "\n\nHibernate does not allow me to persist an object that contains an null embedded object with an integer field.  For example, if I have a class called Thing that looks like this\n\n\t@Entity\n\tpublic class Thing {\n\t\n\t    @Id\n\t    public String id;\n\t\n\t    public Part part;\n\t\n\t}\n\t\n\nwhere Part is an embeddable class that looks like this\n\n\t@Embeddable\n\tpublic class Part {\n\t\n\t    public String a;    \n\t\n\t    public int b;\n\t\n\t}\n\t\n\nthen trying to persist a Thing object with a null Part causes Hibernate to throw an Exception.  In particular, this code\n\n\tThing th = new Thing();\n\tth.id = \"thing.1\";\n\tth.part = null;\n\tsession.saveOrUpdate(th);\n\t\n\ncauses Hibernate to throw this Exception\n\n\torg.hibernate.PropertyValueException: not-null property references a null or transient value: com.ace.moab.api.jobs.Thing.part\n\t\n\nMy guess is that this is happening because Part is an embedded class and so Part.a and Part.b are simply columns in the Thing database table.   Since the Thing.part is null Hibernate wants to set the Part.a and Part.b column values to null for the row for thing.1.  However, Part.b is an integer and Hibernate will not allow integer columns in the database to be null.  This is what causes the Exception, right?\n\nSo I am looking for workarounds for this problem.  I noticed making Part.b an Integer instead of an int seems to work, but for reasons I won't bore you with this is not a good option for us.  Thanks!",
  "lastActivityDate": "2014-11-22T09:11:12.387",
  "title": "Hibernate does not allow an embedded object with an int field to be null?",
  "tags": [
    "java",
    "hibernate",
    "orm",
    "jpa"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201411",
  "itemTally": 0,
  "owner": null
}