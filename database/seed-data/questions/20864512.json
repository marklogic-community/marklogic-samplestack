{"id":"/questions/20864512.json", "creationDate":"2014-01-01T00:22:43.947", "body":"\n\nJust like the title says, I've been working on a fairly large program and have come upon this bug. I'm also open to alternatives for searching a file for a string instead of using . Here is my code narrowed down:\n\n\tistreambuf_iterator<char> eof;\n\tifstream fin;\n\tfin.clear();\n\t\n\tfin.open(filename.c_str());\n\t\n\tif(fin.good()){\n\t //I outputted text to a file to make sure opening the file worked, which it does\n\t}\n\t\n\t//term was not found.\n\tif(eof == search(istreambuf_iterator<char>(fin), eof, term.begin(), term.end()){\n\t   //PROBLEM: this code always executes even when the string term is in the file.\n\t}\n\t\n\nSo just to clarify, my program worked correctly in Linux but now that I have it in a win32 app project in vs2010, the application builds just fine but the search function isn't working like it normally did. (What I mean by normal is that the code in the if statement didn't execute because, where as now it always executes.)\n\nNOTE: The file is a .xml file and the string term is simply \"administration.\"\n\nOne thing that might or might not be important is to know that filename (filename from the code above) is a XML file I have created in the program myself using the code below. Pretty much I create an identical xml file form the pre-existing one except for it is all lower case and in a new location.\n\n\tvoid toLowerFile(string filename, string newloc, string& newfilename){\n\t  //variables\n\t  ifstream fin;\n\t  ofstream fout;\n\t  string temp = \"/\";\n\t  newfilename = newloc + temp + newfilename;\n\t  //open file to read\n\t  fin.open(filename.c_str());\n\t    //open file to write\n\t    fout.open(newfilename.c_str());\n\t    //loop through and read line, lower case, and write\n\t    while (fin.good()){\n\t      getline (fin,temp);\n\t        //write lower case version\n\t        toLowerString(temp);\n\t        fout << temp << endl;\n\t    }\n\t    //close files\n\t    fout.close();\n\t    fin.close();\n\t}\n\t\n\tvoid toLowerString(string& data){\n\t    std::transform(data.begin(), data.end(), data.begin(), ::tolower);\n\t}\n\t", "lastActivityDate":"2014-01-01T11:14:06.130", "title":"Brought a Linux C++ Console Application to a Win32 C++ App using VS2010 and the search function from <algorithm> is no longer working", "tags":["c++", "algorithm", "visual-c++", "search"], "docScore":0, "comments":[], "answers":[{"id":"/answers/20864966.json", "creationDate":"2014-01-01T02:05:49.973", "body":"\n\nGenerally, with Microsoft's compiler, if your program compiles and links a main() function rather than a wmain() function, everything defaults to char. It would be wchar_t or WCHAR if you have a wmain().  If you have tmain() instead, then you are at the mercy of your compiler/make settings and it's the UNICODE macro that determines which flavor your program uses.  But I doubt that char_t/wchar_t mismatch is actually the issue here because I think you would have got an warning or error if all four of the search parameters didn't use the same the same character width.\n\nThis is a bit of a guess, but try this:\n\n\tif(eof == search(istreambuf_iterator<char>(fin.rdbuf()), eof, term.begin(), term.end())\n\t", "accepted":false, "comments":[{"id":"31305027", "text":"Thank you. Unfortunately still a no go, but after the responses I'm getting I'm going to edit my original question and add something I feel is important which I didn't realize before. I created a win32 app project (non empty) without any bells and whistles checked so my main is _TWinMain. Also the file I'm reading I create in the program myself. I tried your solution with both WChar on and off and still nothing.", "creationDate":"2014-01-01T02:18:29.190", "commenter":null}], "itemTally":1, "owner":null, "creationYearMonth":"201401"}, {"id":"/answers/20868049.json", "creationDate":"2014-01-01T11:14:06.130", "body":"\n\nI'm afraid your code is invalid - the `search` algorithm requires forward iterators, but `istreambuf_iterator` is only an input iterator.\n\nConceptually that makes sense - the algorithm needs to backtrack on a partial match, but the stream may not support backtracking.\n\nThe actual behaviour is undefined - so the implementation is allowed to be helpful and make it seem to work, but doesn't have to.\n\nI think you either need to copy the input, or use a smarter search algorithm (single-pass is possible) or a smarter iterator.\n\n(In an ideal world at least one of the compilers would have warned you about this.)", "accepted":true, "comments":[], "itemTally":2, "owner":null, "creationYearMonth":"201401"}], "creationYearMonth":"201401", "itemTally":0, "owner":null}