{
  "id": "/questions/2070766",
  "creationDate": "2014-01-18T02:18:10.570",
  "body": "\n\nI have a base class, with a method, where I would like to use generics to force the coder to use a generic expression on the current class:\n\n\tpublic class TestClass\n\t{\n\t    public void DoStuffWithFuncRef<T>(Expression<Func<T, object>> expression) where T : TestClass\n\t        {\n\t            this.DoStuffWithFuncRef(Property<T>.NameFor(expression));\n\t        }\n\t}\n\t\n\nNow, I would like to force T to be of the type of the instantiated class, which I hope will the cause the C# compiler to automatically understand the generic type to use. E.g. I would like to avoid coding the doStuff method below, where I have to specify the correct type - but rather use the doStuffILikeButCannotGetToWork method:\n\n\tpublic class SubTestClass : TestClass\n\t{\n\t    public string AProperty { get; set; }\n\t\n\t    public void doStuff()\n\t    {\n\t        this.DoStuffWithFuncRef<SubTestClass>(e => e.AProperty);\n\t    }\n\t\n\t    public void doStuffILikeButCannotGetToWork()\n\t    {\n\t        this.DoStuffWithFuncRef(e => e.AProperty);\n\t    }\n\t}\n\t\n\nIs this possible? Should I be doing this in a different way?",
  "lastActivityDate": "2014-01-18T03:22:28.530",
  "title": "How to reference current class type using generics",
  "tags": [
    "c#",
    "generics"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201401",
  "itemTally": 0,
  "owner": null
}