{
  "id": "/questions/2073273",
  "creationDate": "2014-01-18T08:49:12.377",
  "body": "\n\nI am trying to work on a homework assignment for school and am going above what the teacher is asking for the assignment -> I have created a \"list\" class. I keep running into these two errors after adding the 'add()' method to the program - along with the 'newIncomeTax()' methods\n\n> error LNK2019: unresolved external symbol \"public: void __thiscall List::add(class IncomeTax *)\" (?add@List@@QAEXPAVIncomeTax@@@Z) referenced in function _main driver.obj\n\nand\n\n> fatal error LNK1120: 1 unresolved externals \n\nI hope this will be enough code for anyone trying to help me: \n\nnote: the functions below are not in the order that they appear in the original code\n(if that may be the problem I can provide all the code that i'm using)\n\n##list.h\n\n\t#ifndef LIST_H\n\t#define LIST_H\n\t\n\t#include \"IncomeTax.h\"\n\tclass List\n\t{\n\tprivate:\n\t    IncomeTax * First;\n\t    IncomeTax * Last;\n\t    int num_in_list;\n\tpublic:\n\t    List () { num_in_list = 0; First = NULL; Last = NULL; }\n\t    int get_num_in_list() { return num_in_list; }\n\t    IncomeTax * getFirst() { return First; }\n\t    IncomeTax * getLast() { return Last; }\n\t    void del_frnt ();\n\t    void push_front (IncomeTax *);\n\t    void push_back (IncomeTax *);\n\t    void del_last ();\n\t    void add (IncomeTax*);\n\t    IncomeTax * pop_back ();\n\t    IncomeTax * pop_front ();\n\t    IncomeTax * get (int);\n\t};\n\t#endif\n\t\n\nnote: from what I've seen  the list that **I've** made behaves similarly to the  default \n\n##the 'add' method from list.cpp\n\n\tvoid List:: add (IncomeTax * IncomeTax_to_be_added) {\n\t    if (num_in_list == 0) { First = IncomeTax_to_be_added; Last = IncomeTax_to_be_added; }\n\t    else if (num_in_list != 0 ) {\n\t        Last->setNext(IncomeTax_to_be_added);\n\t        IncomeTax_to_be_added->setPrevous(Last);\n\t        Last = IncomeTax_to_be_added;\n\t    }\n\t    num_in_list++;\n\t}\n\t\n\n##IncomeTax.h\n\n\t#ifndef INCOME_TAX\n\t#define INCOME_TAX\n\t\n\t#include <iostream>\n\t#include <string>\n\t#include \"conio.h\"\n\t#include <cassert>\n\tusing namespace std;\n\t\n\tclass IncomeTax {\n\tprivate:\n\t    double incm;\n\t    double ajIncm;\n\t    double subtract;\n\t    double taxRate;\n\t    double add;\n\t    bool married;\n\t\n\t    void calcIncome_m ();\n\t    void calcIncome_s ();\n\tpublic:\n\t    IncomeTax () { incm = 0; subtract = 0; taxRate = 0; add = 0; add = false; }\n\t    // married -> is by default false\n\t    void setmarried ( bool stats ) { married = stats; }\n\t    void setIncm (double in ) { incm = in; }\n\t    void setSubtract ( double sub ) { subtract = sub; }\n\t    void setTaxRate ( double rate ) { taxRate = rate; }\n\t    void setAdd ( double Add ) { add = Add; }\n\t    void setAjIncome ( double AJincome ) { ajIncm = AJincome; }\n\t\n\t    bool getmarried () { return married; }\n\t    double getIncm () { return incm; }\n\t    double getsubtract () { return subtract; }\n\t    double getTaxRate () { return taxRate; }\n\t    double getAdd () { return add; }\n\t    double getAJincome () { return ajIncm; }\n\t    void calcIncome ();\n\t    void pintIncome ();\n\t};\n\t\n\t#endif\n\t\n\n##IncomeTax.cpp\n\n\t#include \"IncomeTax.h\"\n\tusing namespace std;\n\t\n\tvoid IncomeTax::calcIncome(){\n\t    assert (incm != 0);\n\t    if (married) { calcIncome_m(); }\n\t    if (!married) { calcIncome_s(); }\n\t\n\t    ajIncm = (incm - subtract);\n\t    ajIncm -= (ajIncm * taxRate);\n\t    ajIncm += add; \n\t}\n\t\n\tvoid IncomeTax::calcIncome_m() {\n\t    assert (incm != 0);\n\t    ... huge nested if statements ... \n\t    they set subtract, add, taxRate...\n\t}\n\t\n\tvoid IncomeTax::calcIncome_s() {\n\t    assert (incm != 0);\n\t    ... huge nested if statements ... \n\t    they set subtract, add, taxRate...\n\t}\n\t\n\tvoid IncomeTax::pintIncome () {\n\t    assert (incm != 0);\n\t    assert (ajIncm != 0);\n\t\n\t    std::cout.precision(2);\n\t    cout << \"\\tTaxable Income: \" << incm << endl;\n\t    cout << \"\\tAjusted Income: \" << ajIncm << endl;\n\t    cout << \"\\tTax: \" << (incm - ajIncm) << \"\\n\" << endl;\n\t}\n\t\n\n##Driver.cpp\n\n\t#include <conio.h>\n\t#include <iostream>\n\t#include <string>\n\t#include <cassert>\n\t#include \"IncomeTax.h\"\n\t#include \"List.h\"\n\tusing namespace std;\n\t\n\tvoid getMaritalStatus( IncomeTax new_tax) {\n\t    bool done = false;\n\t    char stt = ' ';\n\t    while ( !done ) {\n\t        cout << \"\\nPlease declare weather you are filing taxes jointly or single\" << \"\\n\";\n\t        cout << \"\\t's' = single\\n\\t'm' = married\" << endl;\n\t        stt = getch();\n\t        if ( stt == 's' || stt == 'm' ) { done = true; }\n\t        if ( stt == 's' ) { new_tax.setmarried(true); }\n\t        if ( ! (stt == 's' || stt == 'm') ) { cout << \"\\nyou have entered an invald symbol... \\n\" << endl; }\n\t        if(cin.fail()) { cin.clear(); }\n\t        }\n\t    }\n\t\n\t\n\tvoid get_Income ( IncomeTax new_tax) {\n\t    double _incm = 0;\n\t    char status = ' ';\n\t    bool done = true;\n\t    while ( done ) {\n\t        cout << \"Please enter your TAXABLE INCOME:\" << endl;\n\t        cin >> _incm;\n\t        if ( _incm > 0 ) { new_tax.setIncm(_incm); done = false; }\n\t        if ( _incm <= 0 ) { cout << \"\\nthe number you entered was less than zero\\nplease enter a valad number...\\n\" << endl; } \n\t        if(cin.fail()) { cin.clear(); }\n\t    }\n\t    }\n\t\n\tIncomeTax newIncomeTax () {\n\t    IncomeTax new_tax;\n\t    IncomeTax * temp;\n\t    get_Income(new_tax);\n\t    getMaritalStatus(new_tax);\n\t    new_tax.calcIncome();\n\t    return new_tax;\n\t}\n\t\n\tbool again () {\n\t    bool done = false, answer = false;\n\t    char yn = ' ';\n\t    while ( !done ) {\n\t        cout << \"\\nWould you like to calculate another Income tax? (y/n)\" << endl;\n\t        yn = getch();\n\t        if ( yn == 'y' || yn == 'n' ) { done = true; }\n\t        if ( yn == 'y' ) { return false; }\n\t        if ( yn == 'n' ) { return true; }\n\t        if ( ! (yn == 's' || yn == 'n') ) { cout << \"\\nyou have entered an invald symbol... \\n\" << endl; }\n\t        if(cin.fail()) { cin.clear(); }\n\t        }\n\t    }\n\t\n\tint main () {\n\t    IncomeTax new_tax;\n\t    List L;\n\t    bool done = false;\n\t    while (!done) {\n\t        IncomeTax temp = newIncomeTax();\n\t        IncomeTax * ptr = &temp;\n\t        L.add(ptr);\n\t        done = again();\n\t        };\n\t\n\t    return 0;\n\t};\n\t\n\nI know that there are many better ways to do the 'if' statements -> i just decided that it would be efficient to just use the if statments -> the professor has stated that there is no need to go beyond this.\n\nSince this is homework I would love to get some feed back on ways that I can use better programing techniques. thanks! \n\n I'm using VS express 2008 C++",
  "lastActivityDate": "2014-01-19T19:48:24.563",
  "title": "C++ error LNK2019 && fatal error LNK1120: 1 unresolved externals",
  "tags": [
    "c++",
    "list",
    "linker"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201401",
  "itemTally": 0,
  "owner": null
}