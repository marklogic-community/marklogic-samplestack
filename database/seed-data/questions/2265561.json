{
  "id": "/questions/2265561",
  "creationDate": "2014-02-18T03:30:43.160",
  "body": "\n\n(Postgres 8.3)\n\nI'm working with a DB table *X* 100+ columns wide (which I can't change sadly) many of which get updated constantly and very frequently by normal business process.\n\nI have a requirement to update table *Y* based on updates to a particular column *foo* in *X* updated by unusual business process. However, because of the very high number of updates against *X* simply applying a trigger which inspects *X.foo* to decide whether to update *Y* is considered unacceptable.\n\nTable *Y* is not the end of the line either, there is a chain of ancestors a few deep, all of which need to bubble up to the root.\n\nThe only solutions I can think of are:\n* breaking *X* into multiple tables (not allowed to)\n* explicitly making the updates to *Y* (and *Z* and others) as part of the business logic for updating *X* but this is going to have a big footprint and leaves a lot of room for somebody getting it wrong or missing it when they have to implement the same in another process. And this is clearly just not good design (which I'm *trying* to gradually fix where I can).\n\nDoes anyone know a way to limit trigger execution by column or any other alternative? Triggers on views? Other voodoo?",
  "lastActivityDate": "2014-02-18T06:46:58.537",
  "title": "Postgres: narrowing trigger scope",
  "tags": [
    "postgresql",
    "triggers"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201402",
  "itemTally": 0,
  "owner": null
}