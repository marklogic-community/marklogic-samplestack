{
  "id": "/questions/3041781",
  "creationDate": "2014-06-17T08:09:45.807",
  "body": "\n\nI have been trying to minimize my memory footprint with `UIImagePickerController`, but I'm starting to think that the memory problems I am having are resulting from poor memory management, instead of a particular way to handle the `UIImagePickerController` object.\n\nMy workflow is this: The \"Edit Image\" button is clicked, which presents a `UIActionSheet`. This action sheet allows you to delete, take a picture, choose from the library, or cancel. If you select Choose from the library or Take Picture, I `alloc` an instance of `UIImagePickerController` and present it, followed by a release of `UIImagePickerController`:\n\n\t-(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex\n\t{\n\t    if (actionSheet.tag != 999) {\n\t        UIImagePickerController *imagePicker = [[UIImagePickerController alloc] init];\n\t        imagePicker.delegate = self;\n\t\n\t        BOOL pickImage = nil;\n\t\n\t        if (actionSheet.tag == iPhoneWithDelete) {\n\t            switch (buttonIndex) {\n\t                case 0:\n\t                    object.objectImage = nil;\n\t                    pickImage = NO;\n\t                    break;\n\t                case 1:\n\t                    imagePicker.sourceType = UIImagePickerControllerSourceTypeCamera;\n\t                    pickImage = YES;\n\t                    break;\n\t                case 2:\n\t                    imagePicker.sourceType = UIImagePickerControllerSourceTypeSavedPhotosAlbum;\n\t                    pickImage = YES;\n\t                    break;\n\t                default:\n\t                    pickImage = NO;\n\t                    break;\n\t            }\n\t        } else if (actionSheet.tag == iPhoneNoDelete) {\n\t            switch (buttonIndex) {\n\t                case 0:\n\t                    imagePicker.sourceType = UIImagePickerControllerSourceTypeCamera;\n\t                    pickImage = YES;\n\t                    break;\n\t                case 1:\n\t                    imagePicker.sourceType = UIImagePickerControllerSourceTypeSavedPhotosAlbum;\n\t                    pickImage = YES;\n\t                    break;\n\t                default:\n\t                    pickImage = NO;\n\t                    break;\n\t            }       \n\t        } else if (actionSheet.tag == iPodWithDelete) {\n\t            switch (buttonIndex) {\n\t                case 0:\n\t                    object.objectImage = nil;\n\t                    pickImage = NO;\n\t                    break;\n\t                case 1:\n\t                    imagePicker.sourceType = UIImagePickerControllerSourceTypeSavedPhotosAlbum;\n\t                    pickImage = YES;\n\t                    break;\n\t                default:\n\t                    pickImage = NO;\n\t                    break;\n\t            }\n\t        } else if (actionSheet.tag == iPodNoDelete) {\n\t            switch (buttonIndex) {\n\t                case 0:\n\t                    imagePicker.sourceType = UIImagePickerControllerSourceTypeSavedPhotosAlbum;\n\t                    pickImage = YES;\n\t                    break;\n\t                default:\n\t                    pickImage = NO;\n\t                    break;\n\t            }\n\t        }\n\t\n\t        if (pickImage) {\n\t            imagePicker.allowsEditing = YES;\n\t            [self presentModalViewController:imagePicker animated:YES];\n\t        } else {\n\t            [self setupImageButton];\n\t            [self setupChooseImageButton];\n\t        }\n\t        [imagePicker release];\n\t    }\n\t}\n\t\n\nOnce I get a selection back from the `UIImagePickerController`, I save 2 images, a resized version of the edited image to use for a thumbnail, and a 800x600 version of the original unedited image into a relationship attribute (Transformational, using the same UIImage to PNG transformations found in the Recipes demo code) for display use: (the resize methods are based on the one demoed in [this SO post](http://stackoverflow.com/questions/1282830/uiimagepickercontroller-uiimage-memory-and-more).)\n\n\t- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info\n\t{\n\t\n\t    [self dismissModalViewControllerAnimated:YES];\n\t\n\t    NSManagedObject *oldImage = object.imageFull;\n\t    if (oldImage != nil)\n\t    {\n\t        [object.managedObjectContext deleteObject:oldImage];\n\t    }\n\t\n\t    NSManagedObject *image = [NSEntityDescription insertNewObjectForEntityForName:@\"Image\" inManagedObjectContext:object.managedObjectContext];\n\t    object.imageFull = image;\n\t\n\t    UIImage *rawImage = [info objectForKey:@\"UIImagePickerControllerOriginalImage\"];\n\t\n\t    CGSize size = CGSizeMake(800, 600);\n\t\n\t    UIImage *fullImage = [UIImageManipulator scaleImage:rawImage toSize:size];\n\t\n\t    [image setValue:fullImage forKey:@\"imageFull\"];\n\t\n\t    UIImage *processedImage = [UIImageManipulator scaleImage:[info objectForKey:@\"UIImagePickerControllerEditedImage\"] toSize:CGSizeMake(75, 75)];\n\t    object.objectImage = processedImage;\n\t    [self setupImageButton];\n\t    [self setupChooseImageButton];\n\t\n\t    rawImage = nil;\n\t    fullImage = nil;\n\t    processedImage = nil;\n\t}\n\t\n\nWhen I go through `viewDidUnload` I am setting `self.object = nil`, and `[object release]` during `dealloc`, but I'm still getting memory warnings after about 10 image changes, with a crash at around 20. It leads me to believe that I am not getting that full image out of memory the correct way. What am I missing here?\n\nAnd on a second note, does the Camera source use significantly more memory than the Photo Albums source? I tend to get more crashes when using the camera.\n\n##--EDIT--\n\nStarting a bounty for *any* information about what I may be handling wrong. I will update this post with any answers to anything I have been unclear about. Just at my wit's end on this.\n\n##--EDIT 2--\n\nReworked the code to take chrissr's suggestions into account, and implemented `GCD` to improve usability. Is this as efficient as this process gets? Still getting memory warnings, and a crash around 20 images in. I'm sure that the combination of doing expensive `UIImage` resizing and using `UIImagePickerController` is murdering the CPU, but I can't imagine that every app is dealing with uncertainty around the `UIImagePickerController`. My memory footprint is around 2 megs. I have been operating under the assumption that that was plenty of overhead. Should I reduce that footprint further?\n\nHere is the modified code:\n\n\t- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info\n\t{\n\t\n\t    [self dismissModalViewControllerAnimated:YES];\n\t\n\t    if (object.imagePath != nil) {\n\t        [self deleteImages];\n\t    }\n\t    dispatch_queue_t image_queue;\n\t    image_queue = dispatch_queue_create(\"com.gordonfontenot.app\", NULL);\n\t\n\t    dispatch_async(image_queue, ^{\n\t\n\t        NSDate *now = [NSDate date];\n\t\n\t        NSDateFormatter *f = [[NSDateFormatter alloc] init];\n\t        [f setDateFormat:@\"yyyyMMDDHHmmss\"];\n\t\n\t        NSString *imageName = [NSString stringWithFormat:@\"Image-%@-%i\", [f stringFromDate:now], arc4random() % 100];\n\t        NSString *thumbName = [NSString stringWithFormat:@\"%@-thumb\", imageName];\n\t\n\t        [f release];\n\t\n\t        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n\t        NSString *documentsDirectory = [paths objectAtIndex:0];\n\t\n\t        NSString *fullPath = [documentsDirectory stringByAppendingPathComponent:imageName];\n\t        NSString *thumbPath = [documentsDirectory stringByAppendingPathComponent:thumbName];\n\t\n\t        NSData *thumbImageData = UIImagePNGRepresentation([UIImageManipulator scaleImage:[info objectForKey:@\"UIImagePickerControllerEditedImage\"] toSize:CGSizeMake(120, 120)]);\n\t        [thumbImageData writeToFile:thumbPath atomically:NO];\n\t        dispatch_async(dispatch_get_main_queue(), ^{\n\t            object.thumbPath = thumbPath;\n\t            [self setupImageButton];\n\t            imageButton.enabled = NO;\n\t            [self setupChooseImageButton];\n\t        });\n\t        NSData *fullImageData = UIImagePNGRepresentation([UIImageManipulator scaleImage:[info objectForKey:@\"UIImagePickerControllerOriginalImage\"] toSize:CGSizeMake(800, 600)]);\n\t        [fullImageData writeToFile:fullPath atomically:NO];\n\t\n\t        dispatch_async(dispatch_get_main_queue(), ^{\n\t            imageButton.enabled = YES;\n\t            object.imagePath = fullPath;\n\t        });\n\t\n\t        if (picker.sourceType == UIImagePickerControllerSourceTypeCamera) {\n\t            UIImageWriteToSavedPhotosAlbum([info objectForKey:@\"UIImagePickerControllerOriginalImage\"], self, nil, nil);\n\t        }\n\t\n\t    });\n\t    dispatch_release(image_queue);\n\t}\n\t",
  "lastActivityDate": "2014-07-27T22:56:32.810",
  "title": "Getting crash after picking images from UIImagePickerController (Related to memory leak?)",
  "tags": [
    "memory-management",
    "core-data",
    "uiimage",
    "uiimagepickercontroller"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201407",
  "itemTally": 0,
  "owner": null
}