{
  "id": "/questions/2841619",
  "creationDate": "2014-05-18T04:19:49.750",
  "body": "\n\nThere are a lot of impressive Boost libraries such as Boost.Lambda or Boost.Phoenix which go a long way towards making C++ into a truly functional language. But is there a straightforward way to create a composite function from any 2 or more arbitrary functions or functors?  \n\nIf I have: `int f(int x)` and `int g(int x)`, I want to do something like `f . g` which would statically generate a new function object equivalent to `f(g(x)).`\n\nThis seems to be possible through various techniques, such as those discussed [here](http://www.boostcookbook.com/Recipe:/1234820).  Certainly, you can chain calls to `boost::lambda::bind` to create a composite functor.  But is there anything in Boost which easily allows you to take any 2 or more functions or function objects and combine them to create a single composite functor, similar to how you would do it in a language like Haskell?",
  "lastActivityDate": "2014-11-24T01:18:39.773",
  "title": "Function Composition in C++",
  "tags": [
    "c++",
    "boost",
    "functional-programming"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201411",
  "itemTally": 0,
  "owner": null
}