{
  "id": "/questions/2841971",
  "creationDate": "2014-05-18T06:27:06.753",
  "body": "\n\nI have a particular case where using compound dictionary keys would make a task easier.  I have a working solution, but feel it is inelegant. How would you do it?\n\n\tcontext = {\n\t    'database': {\n\t        'port': 9990,\n\t        'users': ['number2', 'dr_evil']\n\t    },\n\t    'admins': ['number2@virtucon.com', 'dr_evil@virtucon.com'],\n\t    'domain.name': 'virtucon.com'\n\t}\n\t\n\tdef getitem(key, context):\n\t    if hasattr(key, 'upper') and key in context:\n\t        return context[key]\n\t\n\t    keys = key if hasattr(key, 'pop') else key.split('.')\n\t\n\t    k = keys.pop(0)\n\t    if keys:\n\t        try:\n\t            return getitem(keys, context[k])\n\t        except KeyError, e:\n\t            raise KeyError(key)\n\t    if hasattr(context, 'count'):\n\t        k = int(k)\n\t    return context[k]\n\t\n\tif __name__ == \"__main__\":\n\t    print getitem('database', context)\n\t    print getitem('database.port', context)\n\t    print getitem('database.users.0', context)\n\t    print getitem('admins', context)\n\t    print getitem('domain.name', context)\n\t    try:\n\t        getitem('database.nosuchkey', context)\n\t    except KeyError, e:\n\t        print \"Error:\", e\n\t\n\nThanks.",
  "lastActivityDate": "2014-05-18T14:57:56.283",
  "title": "Compound dictionary keys",
  "tags": [
    "attributes",
    "python",
    "dictionary"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201405",
  "itemTally": 0,
  "owner": null
}