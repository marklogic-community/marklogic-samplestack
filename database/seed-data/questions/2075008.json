{
  "id": "/questions/2075008",
  "creationDate": "2014-01-18T13:46:22.890",
  "body": "\n\nI am trying to print the contents of the map and this is where my code fails. I have tested all my methods and I have no problem to read from file, filer the word, put it into map, and even the print function is working.\nHowever, when I am calling the printer function from main it does not print the map.\nI am new to polymorphism and I think that my error is in how I am passing the map to the function in main. \n\nHere is my main class:\n\n\tusing namespace std;\n\t#include <iostream>\n\t#include \"ReadWords.h\"\n\t#include \"ReadPunctWords.h\"\n\t#include \"ReadNumWords.h\"\n\t#include \"ReadCapWords.h\"\n\t#include \"MapWorks.h\"\n\t#include <fstream>\n\t#include <string>\n\t#include <map>\n\t#include <iterator>\n\t\n\t/**\n\t * This main function uses all other classes.\n\t */\n\tint main() {\n\t\n\t\n\t   char* name = \"RomeoJuliet.txt\";\n\t   //ReadPunctWords &obj = *new ReadPunctWords(name);\n\t   ReadPunctWords obj(name);\n\t   string startSearch=\"BEGIN\";\n\t   string endSearch=\"FINIS\";\n\t\n\t\n\t   ReadPunctWords rpw;\n\t   ReadCapWords rcw;\n\t   ReadNumWords rnw;\n\t   MapWorks mw;\n\t\n\t   while(rpw.isNextWord()){\n\t       string tempword = obj.getNextWord();\n\t       if(tempword == startSearch){\n\t           break;\n\t       }\n\t   }\n\t   while(rpw.isNextWord()){\n\t       string tempword = obj.getNextWord();\n\t       if(tempword == endSearch){\n\t           break;\n\t       }\n\t       else{\n\t               if(rpw.filter(tempword)){\n\t                   mw.addToMap(tempword, mw.mapPunct);\n\t               }\n\t\n\t               if(rcw.filter(tempword)){\n\t                   mw.addToMap(tempword, mw.mapCap);\n\t               }\n\t\n\t               if(rnw.filter(tempword)){\n\t                   mw.addToMap(tempword, mw.mapNum);\n\t               }\n\t           }\n\t   }\n\t\n\t\n\t   mw.printMap(mw.mapPunct);\n\t   mw.printMap(mw.mapCap);\n\t   mw.printMap(mw.mapNum);\n\t\n\t\n\t   //clear map\n\t   mw.clearMap(mw.mapPunct);\n\t   mw.clearMap(mw.mapCap);\n\t   mw.clearMap(mw.mapNum);\n\t\n\t   //close the file\n\t   //obj.close();\n\t\n\t\n\t   //delete &obj;\n\t\n\t   //exit(0); // normal exit\n\t   return 0;\n\t\n\t}\n\t\n\nAnd my MapWorks.cpp which contains the maps and the functions related to maps:\n\n\tusing namespace std;\n\t#include <iostream>\n\t#include <string>\n\t#include <map>\n\t#include <iterator>\n\t#include \"MapWorks.h\"\n\t\n\t/**\n\t * MapWorks class builds the maps and does the map processing and printing\n\t */\n\t\n\t\n\tMapWorks::MapWorks() {}\n\t\n\tvoid MapWorks::addToMap(string myword, map<string, int> & myMap){\n\t    int n = myMap[myword];\n\t    myMap[myword]= n+1;\n\t}\n\t\n\t\n\tvoid MapWorks::printMap (map<string, int> &myMap){\n\t\n\t    for (map<string, int>::iterator it = myMap.begin(); it != myMap.end(); ++it)\n\t    {\n\t        cout << it->first << \" ==> \" << it->second << '\\n'<<endl;\n\t    }\n\t}\n\t\n\t\n\t//delete entries in map\n\tvoid MapWorks::clearMap(map<string, int>myMap) {\n\t    myMap.clear();\n\t\n\t}\n\t\n\nMapWorks.h :\n\n\t#ifndef MAPWORKS_H\n\t#define MAPWORKS_H\n\t#include <string>\n\t#include <map>\n\tusing namespace std;\n\t\n\t\n\t/**\n\t * MapWorks class builds the maps and does the map processing and printing\n\t */\n\t\n\tclass MapWorks {\n\t    public:\n\t\n\t    map<string, int> mapPunct; //(word, number of occurences)\n\t    map<string, int> mapNum; //(word, number of occurences)\n\t    map<string, int> mapCap; //(word, number of occurences)\n\t\n\t    MapWorks();\n\t\n\t    void addToMap(string myword, map<string, int> & myMap); //adds words to a map\n\t\n\t    void printMap (map<string, int> &myMap); //prints the map\n\t\n\t    void clearMap(map<string, int>); //clear map\n\t};\n\t\n\t#endif\n\t\n\nMy ReadWords.h :\n\n\t/**\n\t * ReadWords class, the base class for ReadNumWords, ReadPunctWords, ReadCapWords\n\t */\n\t\n\t#ifndef READWORDS_H\n\t#define READWORDS_H\n\t\n\tusing namespace std;\n\t#include <string>\n\t#include <fstream>\n\t#include<iostream>\n\t\n\t class ReadWords\n\t {\n\t   private:\n\t     string nextword;\n\t     ifstream wordfile;\n\t     bool eoffound;\n\t\n\t   public:\n\t    /**\n\t     * Constructor. Opens the file with the default name \"text.txt\".\n\t     * Program exits with an error message if the file does not exist.\n\t     */\n\t     ReadWords();\n\t\n\t    /**\n\t     * Constructor. Opens the file with the given filename.\n\t     * Program exits with an error message if the file does not exist.\n\t     * @param filename - a C string naming the file to read.\n\t     */\n\t     ReadWords(char *filename);\n\t\n\t    /**\n\t     * Closes the file.\n\t     */\n\t     void close();\n\t\n\t    /**\n\t     * Returns a string, being the next word in the file.\n\t     * @return - string - next word.\n\t     */\n\t     string getNextWord();\n\t\n\t    /**\n\t     * Returns true if there is a further word in the file, false if we have reached the\n\t     * end of file.\n\t     * @return - bool - !eof\n\t     */\n\t     bool isNextWord();\n\t\n\t     //pure virtual function for filter\n\t     virtual bool filter(string word)=0;\n\t\n\t    /**\n\t     * Fix the word by the definition of \"word\"\n\t     * end of file.\n\t     * @return - string\n\t     */\n\t     string fix(string word);\n\t };\n\t\n\t #endif\n\t\n\nAnd my ReadPunctWords (ReadNumWords and ReadCapWords are quite the same, just checking if the word has digits or capital letters instead of punctuations like in here):\n\n\t#ifndef READPUNCTWORDS_H\n\t#define READPUNCTWORDS_H\n\tusing namespace std;\n\t#include <string>\n\t#include \"ReadWords.h\"\n\t\n\t/**\n\t * ReadPunctWords inherits ReadWords, so MUST define the function filter.\n\t * It chooses to override the default constructor.\n\t */\n\tclass ReadPunctWords: public ReadWords {\n\t    public:\n\t    ReadPunctWords();\n\t    ReadPunctWords(char *filename): ReadWords(filename){};\n\t    virtual bool filter(string word);\n\t};\n\t\n\t#endif\n\t\n\nI would appreciate any help from you. \nThanks, Adriana",
  "lastActivityDate": "2014-01-18T22:35:08.267",
  "title": "C++ problem in calling a function in main that prints the map",
  "tags": [
    "c++",
    "function",
    "map",
    "main"
  ],
  "docScore": 0,
  "comments": [],
  "answers": [],
  "creationYearMonth": "201401",
  "itemTally": 0,
  "owner": null
}